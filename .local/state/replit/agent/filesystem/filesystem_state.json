{"file_contents":{"modules/patients.py":{"content":"from datetime import datetime\n\nclass PatientManager:\n    def __init__(self, db):\n        self.db = db\n    \n    def add_patient(self, name, family_phone, admission_date, department, \n                   daily_cost, receives_cigarettes, cigarettes_count):\n        query = '''\n            INSERT INTO patients (name, family_phone, admission_date, department, \n                                daily_cost, receives_cigarettes, cigarettes_count, status)\n            VALUES (?, ?, ?, ?, ?, ?, ?, 'نشط')\n        '''\n        self.db.execute(query, (name, family_phone, admission_date, department,\n                               daily_cost, receives_cigarettes, cigarettes_count))\n        return True\n    \n    def get_all_patients(self, status=None):\n        if status:\n            query = 'SELECT * FROM patients WHERE status = ? ORDER BY id DESC'\n            return self.db.fetchall(query, (status,))\n        else:\n            query = 'SELECT * FROM patients ORDER BY id DESC'\n            return self.db.fetchall(query)\n    \n    def get_patient(self, patient_id):\n        query = 'SELECT * FROM patients WHERE id = ?'\n        return self.db.fetchone(query, (patient_id,))\n    \n    def update_patient(self, patient_id, name, family_phone, department, \n                      daily_cost, receives_cigarettes, cigarettes_count):\n        query = '''\n            UPDATE patients \n            SET name = ?, family_phone = ?, department = ?,\n                daily_cost = ?, receives_cigarettes = ?, cigarettes_count = ?\n            WHERE id = ?\n        '''\n        self.db.execute(query, (name, family_phone, department, daily_cost,\n                               receives_cigarettes, cigarettes_count, patient_id))\n        return True\n    \n    def discharge_patient(self, patient_id):\n        query = '''\n            UPDATE patients \n            SET status = 'متخرج', discharged_at = ?\n            WHERE id = ?\n        '''\n        self.db.execute(query, (datetime.now().strftime('%Y-%m-%d'), patient_id))\n        return True\n    \n    def get_patient_balance(self, patient_id):\n        patient = self.get_patient(patient_id)\n        if not patient:\n            return 0\n        \n        admission_date = datetime.strptime(patient[3], '%Y-%m-%d')\n        if patient[8] == 'متخرج' and patient[10]:\n            discharge_date = datetime.strptime(patient[10], '%Y-%m-%d')\n        else:\n            discharge_date = datetime.now()\n        \n        days = (discharge_date - admission_date).days + 1\n        total_cost = days * float(patient[5])\n        \n        payments_query = 'SELECT SUM(amount) FROM payments WHERE patient_id = ?'\n        payments = self.db.fetchone(payments_query, (patient_id,))\n        total_paid = float(payments[0]) if payments[0] else 0\n        \n        return total_cost - total_paid\n    \n    def get_active_count(self):\n        query = 'SELECT COUNT(*) FROM patients WHERE status = \"نشط\"'\n        result = self.db.fetchone(query)\n        return result[0] if result else 0\n    \n    def get_graduated_count(self):\n        query = 'SELECT COUNT(*) FROM patients WHERE status = \"متخرج\"'\n        result = self.db.fetchone(query)\n        return result[0] if result else 0\n    \n    def get_total_cigarettes(self):\n        query = 'SELECT SUM(cigarettes_count) FROM patients WHERE status = \"نشط\" AND receives_cigarettes = 1'\n        result = self.db.fetchone(query)\n        return int(result[0]) if result[0] else 0\n    \n    def get_patient_detailed_statement(self, patient_id):\n        patient = self.get_patient(patient_id)\n        if not patient:\n            return None\n        \n        admission_date = datetime.strptime(patient[3], '%Y-%m-%d')\n        if patient[8] == 'متخرج' and patient[10]:\n            discharge_date = datetime.strptime(patient[10], '%Y-%m-%d')\n        else:\n            discharge_date = datetime.now()\n        \n        days = (discharge_date - admission_date).days + 1\n        accommodation_cost = days * float(patient[5])\n        \n        payments_query = '''\n            SELECT payment_date, amount, notes \n            FROM payments \n            WHERE patient_id = ? \n            ORDER BY payment_date DESC\n        '''\n        payments = self.db.fetchall(payments_query, (patient_id,))\n        total_paid = sum(p[1] for p in payments)\n        \n        cigarettes_cost = 0\n        if patient[6]:\n            price_query = \"SELECT setting_value FROM settings WHERE setting_key = 'cigarette_pack_price'\"\n            price_result = self.db.fetchone(price_query)\n            cigarette_pack_price = float(price_result[0]) if price_result else 40\n            \n            cigarettes_per_day = patient[7]\n            packs_per_day = cigarettes_per_day / 20\n            cigarettes_cost = packs_per_day * days * cigarette_pack_price\n        \n        total_expenses = accommodation_cost + cigarettes_cost\n        balance = total_expenses - total_paid\n        \n        return {\n            'patient': patient,\n            'admission_date': admission_date,\n            'discharge_date': discharge_date if patient[8] == 'متخرج' else None,\n            'days': days,\n            'accommodation_cost': accommodation_cost,\n            'cigarettes_cost': cigarettes_cost,\n            'total_expenses': total_expenses,\n            'payments': payments,\n            'total_paid': total_paid,\n            'balance': balance\n        }\n","size_bytes":5374},"modules/employees.py":{"content":"from datetime import datetime\n\nclass EmployeeManager:\n    def __init__(self, db):\n        self.db = db\n    \n    def add_employee(self, name, position, phone, hire_date, base_salary):\n        query = '''\n            INSERT INTO employees (name, position, phone, hire_date, base_salary, status)\n            VALUES (?, ?, ?, ?, ?, 'نشط')\n        '''\n        self.db.execute(query, (name, position, phone, hire_date, base_salary))\n        return True\n    \n    def get_all_employees(self, status=None):\n        if status:\n            query = 'SELECT * FROM employees WHERE status = ? ORDER BY id DESC'\n            return self.db.fetchall(query, (status,))\n        else:\n            query = 'SELECT * FROM employees ORDER BY id DESC'\n            return self.db.fetchall(query)\n    \n    def get_employee(self, employee_id):\n        query = 'SELECT * FROM employees WHERE id = ?'\n        return self.db.fetchone(query, (employee_id,))\n    \n    def update_employee(self, employee_id, name, position, phone, base_salary):\n        query = '''\n            UPDATE employees \n            SET name = ?, position = ?, phone = ?, base_salary = ?\n            WHERE id = ?\n        '''\n        self.db.execute(query, (name, position, phone, base_salary, employee_id))\n        return True\n    \n    def add_transaction(self, employee_id, transaction_type, amount, transaction_date, notes=''):\n        query = '''\n            INSERT INTO employee_transactions (employee_id, transaction_type, amount, transaction_date, notes)\n            VALUES (?, ?, ?, ?, ?)\n        '''\n        self.db.execute(query, (employee_id, transaction_type, amount, transaction_date, notes))\n        return True\n    \n    def get_employee_transactions(self, employee_id):\n        query = '''\n            SELECT * FROM employee_transactions \n            WHERE employee_id = ? \n            ORDER BY transaction_date DESC\n        '''\n        return self.db.fetchall(query, (employee_id,))\n    \n    def get_active_count(self):\n        query = 'SELECT COUNT(*) FROM employees WHERE status = \"نشط\"'\n        result = self.db.fetchone(query)\n        return result[0] if result else 0\n    \n    def calculate_employee_balance(self, employee_id):\n        query = '''\n            SELECT transaction_type, SUM(amount) \n            FROM employee_transactions \n            WHERE employee_id = ? \n            GROUP BY transaction_type\n        '''\n        transactions = self.db.fetchall(query, (employee_id,))\n        \n        salary_paid = 0\n        deductions = 0\n        advances = 0\n        bonuses = 0\n        \n        for trans in transactions:\n            trans_type = trans[0]\n            amount = trans[1] if trans[1] else 0\n            \n            if trans_type == 'راتب':\n                salary_paid += amount\n            elif trans_type == 'خصم':\n                deductions += amount\n            elif trans_type == 'سلفة':\n                advances += amount\n            elif trans_type == 'مكافأة':\n                bonuses += amount\n        \n        return {\n            'salary_paid': salary_paid,\n            'deductions': deductions,\n            'advances': advances,\n            'bonuses': bonuses,\n            'total': salary_paid + bonuses - deductions - advances\n        }\n    \n    def get_all_transactions(self):\n        query = '''\n            SELECT et.*, e.name \n            FROM employee_transactions et\n            JOIN employees e ON et.employee_id = e.id\n            ORDER BY et.transaction_date DESC\n        '''\n        return self.db.fetchall(query)\n    \n    def delete_employee(self, employee_id):\n        trans_query = 'DELETE FROM employee_transactions WHERE employee_id = ?'\n        self.db.execute(trans_query, (employee_id,))\n        \n        employee_query = 'DELETE FROM employees WHERE id = ?'\n        self.db.execute(employee_query, (employee_id,))\n        return True\n    \n    def delete_transaction(self, transaction_id):\n        query = 'DELETE FROM employee_transactions WHERE id = ?'\n        self.db.execute(query, (transaction_id,))\n        return True\n","size_bytes":4059},"ui/cigarettes_widget.py":{"content":"from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, \n                             QLabel, QTableWidget, QTableWidgetItem, QHeaderView,\n                             QLineEdit, QMessageBox, QDialog, QDialogButtonBox,\n                             QSpinBox, QCheckBox, QFrame)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\nfrom datetime import datetime\nimport os\nimport webbrowser\nimport tempfile\n\nclass CigarettesWidget(QWidget):\n    def __init__(self, db, patient_mgr, current_user=None):  # --- NEW (إضافة المستخدم الحالي) ---\n        super().__init__()\n        self.db = db\n        self.patient_mgr = patient_mgr\n        self.current_user = current_user  # --- NEW (تخزين المستخدم الحالي) ---\n        self.setup_ui()\n        \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        header = QLabel('إدارة السجائر')\n        header.setFont(QFont('Arial', 24, QFont.Weight.Bold))\n        header.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        layout.addWidget(header)\n        \n        price_frame = QFrame()\n        price_frame.setFrameStyle(QFrame.Shape.StyledPanel)\n        price_layout = QHBoxLayout()\n        \n        price_label = QLabel('سعر علبة السجائر (20 سيجارة):')\n        price_label.setFont(QFont('Arial', 12))\n        price_layout.addWidget(price_label)\n        \n        self.price_input = QLineEdit()\n        self.price_input.setFixedWidth(150)\n        self.price_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        current_price = self.get_cigarette_price()\n        self.price_input.setText(str(current_price))\n        price_layout.addWidget(self.price_input)\n        \n        price_label2 = QLabel('جنيه')\n        price_layout.addWidget(price_label2)\n        \n        save_price_btn = QPushButton('حفظ السعر')\n        save_price_btn.clicked.connect(self.save_price)\n        price_layout.addWidget(save_price_btn)\n        \n        price_layout.addStretch()\n        price_frame.setLayout(price_layout)\n        layout.addWidget(price_frame)\n        \n        stats_frame = QFrame()\n        stats_frame.setFrameStyle(QFrame.Shape.StyledPanel)\n        stats_layout = QHBoxLayout()\n        \n        total_cigarettes = self.patient_mgr.get_total_cigarettes()\n        total_packs = total_cigarettes / 20\n        daily_cost = total_packs * current_price\n        \n        self.stat1_label = QLabel(f'إجمالي السجائر اليومية: {total_cigarettes} سيجارة')\n        self.stat1_label.setFont(QFont('Arial', 12, QFont.Weight.Bold))\n        stats_layout.addWidget(self.stat1_label)\n        \n        self.stat2_label = QLabel(f'عدد العلب المطلوبة: {total_packs:.1f} علبة')\n        self.stat2_label.setFont(QFont('Arial', 12, QFont.Weight.Bold))\n        stats_layout.addWidget(self.stat2_label)\n        \n        self.stat3_label = QLabel(f'التكلفة اليومية: {daily_cost:.2f} جنيه')\n        self.stat3_label.setFont(QFont('Arial', 12, QFont.Weight.Bold))\n        stats_layout.addWidget(self.stat3_label)\n        \n        stats_frame.setLayout(stats_layout)\n        layout.addWidget(stats_frame)\n        \n        buttons_layout = QHBoxLayout()\n        \n        refresh_btn = QPushButton('🔄 تحديث')\n        refresh_btn.clicked.connect(self.load_cigarettes_data)\n        buttons_layout.addWidget(refresh_btn)\n        \n        print_btn = QPushButton('🖨️ طباعة كشف حساب اليوم')\n        print_btn.clicked.connect(self.print_daily_report)\n        buttons_layout.addWidget(print_btn)\n        \n        buttons_layout.addStretch()\n        layout.addLayout(buttons_layout)\n        \n        self.table = QTableWidget()\n        self.table.setColumnCount(7)\n        self.table.setHorizontalHeaderLabels([\n            'رقم المريض', 'الاسم', 'القسم', 'عدد السجائر', \n            'عدد العلب', 'التكلفة اليومية', 'إجراءات'\n        ])\n        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.table.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        self.table.setAlternatingRowColors(True)\n        layout.addWidget(self.table)\n        \n        self.setLayout(layout)\n        self.load_cigarettes_data()\n    \n    def get_cigarette_price(self):\n        query = \"SELECT setting_value FROM settings WHERE setting_key = 'cigarette_pack_price'\"\n        result = self.db.fetchone(query)\n        return float(result[0]) if result else 40.0\n    \n    def save_price(self):\n        try:\n            new_price = float(self.price_input.text())\n            if new_price <= 0:\n                QMessageBox.warning(self, 'خطأ', 'السعر يجب أن يكون أكبر من صفر')\n                return\n            \n            # --- NEW FEATURE: Show impact of price change ---\n            old_price = self.get_cigarette_price()\n            \n            # Calculate affected patients and financial impact\n            affected_patients_query = '''\n                SELECT COUNT(*), SUM(cigarettes_count) \n                FROM patients \n                WHERE status = 'نشط' AND receives_cigarettes = 1\n            '''\n            result = self.db.fetchone(affected_patients_query)\n            affected_count = result[0] if result else 0\n            total_daily_cigarettes = result[1] if result and result[1] else 0\n            \n            # Calculate daily financial difference\n            old_daily_cost = (total_daily_cigarettes / 20) * old_price\n            new_daily_cost = (total_daily_cigarettes / 20) * new_price\n            daily_difference = new_daily_cost - old_daily_cost\n            \n            # Show confirmation dialog\n            price_change = new_price - old_price\n            confirmation_msg = f'''\n            <div style=\"text-align: right; direction: rtl;\">\n            <h3>تأكيد تغيير سعر السجائر</h3>\n            <p><b>السعر القديم:</b> {old_price:.2f} جنيه</p>\n            <p><b>السعر الجديد:</b> {new_price:.2f} جنيه</p>\n            <p><b>الفرق:</b> {price_change:+.2f} جنيه</p>\n            <br>\n            <p><b>عدد المرضى المتأثرين:</b> {affected_count} مريض</p>\n            <p><b>إجمالي السجائر اليومية:</b> {total_daily_cigarettes} سيجارة</p>\n            <p><b>الفرق في التكلفة اليومية:</b> {daily_difference:+.2f} جنيه</p>\n            <br>\n            <p>⚠️ سيؤثر هذا التغيير على حساب تكلفة السجائر في كشوف حساب جميع المرضى الحاليين والمستقبليين.</p>\n            <p>هل أنت متأكد من التغيير؟</p>\n            </div>\n            '''\n            \n            msg_box = QMessageBox(self)\n            msg_box.setWindowTitle('تأكيد تغيير السعر')\n            msg_box.setText(confirmation_msg)\n            msg_box.setTextFormat(Qt.TextFormat.RichText)\n            msg_box.setStandardButtons(\n                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n            )\n            msg_box.setDefaultButton(QMessageBox.StandardButton.No)\n            \n            if msg_box.exec() == QMessageBox.StandardButton.Yes:\n                # --- FIX (تحديث السعر داخل transaction آمنة وتسجيل في audit_log) ---\n                try:\n                    # Begin transaction\n                    # Update the price\n                    query = '''\n                        UPDATE settings \n                        SET setting_value = ?, updated_at = ?\n                        WHERE setting_key = 'cigarette_pack_price'\n                    '''\n                    self.db.execute(query, (str(new_price), datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n                    \n                    # Log the price change to audit_log\n                    self.log_price_change(old_price, new_price, affected_count, daily_difference)\n                    \n                    self.db.conn.commit()\n                    QMessageBox.information(self, 'نجح', 'تم حفظ السعر بنجاح وتسجيل التغيير')\n                    self.load_cigarettes_data()\n                except Exception as e:\n                    self.db.conn.rollback()\n                    QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء حفظ السعر:\\n{str(e)}')\n            \n        except ValueError:\n            QMessageBox.warning(self, 'خطأ', 'الرجاء إدخال سعر صحيح')\n    \n    def log_price_change(self, old_price, new_price, affected_patients, daily_difference):\n        # --- FIX (تسجيل تغيير السعر في audit_log بدلاً من ملف نصي) ---\n        try:\n            user_id = self.current_user.get('id') if self.current_user else None\n            username = self.current_user.get('username') if self.current_user else 'غير معروف'\n            \n            action_description = f'تغيير سعر علبة السجائر من {old_price:.2f} إلى {new_price:.2f} جنيه. الفرق في التكلفة اليومية: {daily_difference:+.2f} جنيه'\n            \n            query = '''\n                INSERT INTO audit_log (\n                    user_id, username, action_type, action_description, \n                    old_value, new_value, affected_count, created_at\n                )\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n            '''\n            self.db.execute(query, (\n                user_id,\n                username,\n                'تغيير سعر السجائر',\n                action_description,\n                str(old_price),\n                str(new_price),\n                affected_patients,\n                datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            ))\n        except Exception as e:\n            print(f'فشل تسجيل تغيير السعر في audit_log: {str(e)}')\n    \n    def load_cigarettes_data(self):\n        query = '''\n            SELECT id, name, department, cigarettes_count, receives_cigarettes \n            FROM patients \n            WHERE status = 'نشط'\n            ORDER BY receives_cigarettes DESC, name\n        '''\n        patients = self.db.fetchall(query)\n        \n        cigarette_price = self.get_cigarette_price()\n        \n        self.table.setRowCount(len(patients))\n        for row, patient in enumerate(patients):\n            patient_id, name, department, cigarettes_count, receives_cigarettes = patient\n            packs = cigarettes_count / 20\n            daily_cost = packs * cigarette_price\n            \n            self.table.setItem(row, 0, QTableWidgetItem(str(patient_id)))\n            self.table.setItem(row, 1, QTableWidgetItem(name))\n            self.table.setItem(row, 2, QTableWidgetItem(department))\n            self.table.setItem(row, 3, QTableWidgetItem(str(cigarettes_count)))\n            self.table.setItem(row, 4, QTableWidgetItem(f'{packs:.2f}'))\n            self.table.setItem(row, 5, QTableWidgetItem(f'{daily_cost:.2f}'))\n            \n            if receives_cigarettes:\n                action_btn = QPushButton('تعطيل السجائر')\n                action_btn.setStyleSheet('background-color: #e74c3c; color: white;')\n            else:\n                action_btn = QPushButton('تفعيل السجائر')\n                action_btn.setStyleSheet('background-color: #27ae60; color: white;')\n            \n            action_btn.clicked.connect(lambda checked, pid=patient_id, enabled=receives_cigarettes: self.toggle_cigarettes(pid, enabled))\n            self.table.setCellWidget(row, 6, action_btn)\n        \n        total_cigarettes = self.patient_mgr.get_total_cigarettes()\n        total_packs = total_cigarettes / 20\n        daily_cost = total_packs * cigarette_price\n        \n        self.stat1_label.setText(f'إجمالي السجائر اليومية: {total_cigarettes} سيجارة')\n        self.stat2_label.setText(f'عدد العلب المطلوبة: {total_packs:.1f} علبة')\n        self.stat3_label.setText(f'التكلفة اليومية: {daily_cost:.2f} جنيه')\n    \n    def toggle_cigarettes(self, patient_id, currently_enabled):\n        if currently_enabled:\n            reply = QMessageBox.question(\n                self, 'تأكيد', \n                'هل أنت متأكد من تعطيل السجائر لهذا المريض؟',\n                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n            )\n            \n            if reply == QMessageBox.StandardButton.Yes:\n                query = '''\n                    UPDATE patients \n                    SET receives_cigarettes = 0, cigarettes_count = 0\n                    WHERE id = ?\n                '''\n                self.db.execute(query, (patient_id,))\n                QMessageBox.information(self, 'نجح', 'تم تعطيل السجائر بنجاح')\n                self.load_cigarettes_data()\n        else:\n            dialog = QDialog(self)\n            dialog.setWindowTitle('تفعيل السجائر')\n            dialog.setFixedWidth(300)\n            \n            layout = QVBoxLayout()\n            \n            label = QLabel('أدخل عدد السجائر اليومية:')\n            layout.addWidget(label)\n            \n            count_input = QSpinBox()\n            count_input.setMinimum(1)\n            count_input.setMaximum(100)\n            count_input.setValue(20)\n            count_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n            layout.addWidget(count_input)\n            \n            buttons = QDialogButtonBox(\n                QDialogButtonBox.StandardButton.Ok | \n                QDialogButtonBox.StandardButton.Cancel\n            )\n            buttons.accepted.connect(dialog.accept)\n            buttons.rejected.connect(dialog.reject)\n            layout.addWidget(buttons)\n            \n            dialog.setLayout(layout)\n            \n            if dialog.exec() == QDialog.DialogCode.Accepted:\n                cigarettes_count = count_input.value()\n                query = '''\n                    UPDATE patients \n                    SET receives_cigarettes = 1, cigarettes_count = ?\n                    WHERE id = ?\n                '''\n                self.db.execute(query, (cigarettes_count, patient_id))\n                QMessageBox.information(self, 'نجح', f'تم تفعيل السجائر بنجاح ({cigarettes_count} سيجارة يومياً)')\n                self.load_cigarettes_data()\n    \n    def print_daily_report(self):\n        try:\n            cigarette_price = self.get_cigarette_price()\n            \n            query = '''\n                SELECT id, name, department, cigarettes_count \n                FROM patients \n                WHERE status = 'نشط' AND receives_cigarettes = 1\n                ORDER BY name\n            '''\n            patients = self.db.fetchall(query)\n            \n            total_cigarettes = 0\n            total_cost = 0\n            \n            patients_table_rows = ''\n            for patient in patients:\n                patient_id, name, department, cigarettes_count = patient\n                packs = cigarettes_count / 20\n                daily_cost = packs * cigarette_price\n                \n                total_cigarettes += cigarettes_count\n                total_cost += daily_cost\n                \n                patients_table_rows += f'''\n                <tr>\n                    <td>{patient_id}</td>\n                    <td>{name}</td>\n                    <td>{department}</td>\n                    <td>{cigarettes_count}</td>\n                    <td>{packs:.2f}</td>\n                    <td>{daily_cost:.2f}</td>\n                </tr>\n                '''\n            \n            total_packs = total_cigarettes / 20\n            \n            html_content = f'''<!DOCTYPE html>\n<html dir=\"rtl\" lang=\"ar\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>تقرير السجائر اليومي</title>\n    <style>\n        @media print {{\n            body {{\n                margin: 0;\n                padding: 20px;\n            }}\n            .no-print {{\n                display: none;\n            }}\n        }}\n        \n        body {{\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            direction: rtl;\n            text-align: right;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            padding: 20px;\n            margin: 0;\n        }}\n        \n        .container {{\n            max-width: 1000px;\n            margin: 0 auto;\n            background: white;\n            padding: 40px;\n            border-radius: 10px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }}\n        \n        .header {{\n            text-align: center;\n            border-bottom: 3px solid #667eea;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n        }}\n        \n        .header h1 {{\n            color: #667eea;\n            margin: 0;\n            font-size: 32px;\n            font-weight: bold;\n        }}\n        \n        .header h2 {{\n            color: #764ba2;\n            margin: 10px 0 0 0;\n            font-size: 24px;\n        }}\n        \n        .header .date {{\n            color: #666;\n            font-size: 14px;\n            margin-top: 10px;\n        }}\n        \n        .info-section {{\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 10px;\n            margin: 20px 0;\n        }}\n        \n        .info-section p {{\n            margin: 8px 0;\n            font-size: 16px;\n            font-weight: bold;\n        }}\n        \n        .stats-grid {{\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin: 30px 0;\n        }}\n        \n        .stat-card {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 25px;\n            border-radius: 10px;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n            text-align: center;\n        }}\n        \n        .stat-card h3 {{\n            margin: 0 0 10px 0;\n            font-size: 16px;\n            opacity: 0.9;\n        }}\n        \n        .stat-card .value {{\n            font-size: 32px;\n            font-weight: bold;\n            margin: 0;\n        }}\n        \n        .details-table {{\n            width: 100%;\n            border-collapse: collapse;\n            margin: 30px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }}\n        \n        .details-table th {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 15px;\n            text-align: center;\n            font-weight: bold;\n        }}\n        \n        .details-table td {{\n            padding: 12px 15px;\n            border-bottom: 1px solid #ddd;\n            text-align: center;\n        }}\n        \n        .details-table tr:hover {{\n            background-color: #f5f5f5;\n        }}\n        \n        .footer {{\n            text-align: center;\n            margin-top: 40px;\n            padding-top: 20px;\n            border-top: 2px solid #eee;\n            color: #666;\n            font-size: 14px;\n        }}\n        \n        .print-button {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border: none;\n            padding: 15px 30px;\n            font-size: 16px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 20px auto;\n            display: block;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }}\n        \n        .print-button:hover {{\n            transform: translateY(-2px);\n            box-shadow: 0 6px 8px rgba(0,0,0,0.3);\n        }}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🏥 دار الحياة للطب النفسي وعلاج الإدمان</h1>\n            <h2>🚬 تقرير السجائر اليومي</h2>\n            <div class=\"date\">تاريخ التقرير: {datetime.now().strftime('%Y-%m-%d %H:%M')}</div>\n        </div>\n        \n        <div class=\"info-section\">\n            <p>📅 التاريخ: {datetime.now().strftime('%Y-%m-%d')}</p>\n            <p>💰 سعر علبة السجائر (20 سيجارة): {cigarette_price:.2f} جنيه</p>\n        </div>\n        \n        <div class=\"stats-grid\">\n            <div class=\"stat-card\">\n                <h3>إجمالي السجائر اليومية</h3>\n                <div class=\"value\">{total_cigarettes}</div>\n                <p style=\"margin-top: 10px; font-size: 14px;\">سيجارة</p>\n            </div>\n            <div class=\"stat-card\">\n                <h3>عدد العلب المطلوبة</h3>\n                <div class=\"value\">{total_packs:.1f}</div>\n                <p style=\"margin-top: 10px; font-size: 14px;\">علبة</p>\n            </div>\n            <div class=\"stat-card\">\n                <h3>التكلفة اليومية الإجمالية</h3>\n                <div class=\"value\">{total_cost:.2f}</div>\n                <p style=\"margin-top: 10px; font-size: 14px;\">جنيه</p>\n            </div>\n        </div>\n        \n        <h3 style=\"color: #667eea; margin-top: 40px;\">📋 تفاصيل المرضى المستلمين للسجائر</h3>\n        <table class=\"details-table\">\n            <tr>\n                <th>رقم المريض</th>\n                <th>الاسم</th>\n                <th>القسم</th>\n                <th>عدد السجائر</th>\n                <th>عدد العلب</th>\n                <th>التكلفة اليومية</th>\n            </tr>\n            {patients_table_rows}\n        </table>\n        \n        <div class=\"footer\">\n            <p><strong>دار الحياة للطب النفسي وعلاج الإدمان</strong></p>\n            <p>نظام المحاسبة الإلكتروني</p>\n        </div>\n        \n        <button class=\"print-button no-print\" onclick=\"window.print()\">🖨️ طباعة التقرير</button>\n    </div>\n</body>\n</html>'''\n            \n            temp_dir = tempfile.gettempdir()\n            filename = os.path.join(temp_dir, f'cigarettes_report_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.html')\n            \n            with open(filename, 'w', encoding='utf-8') as f:\n                f.write(html_content)\n            \n            webbrowser.open('file://' + os.path.abspath(filename))\n            QMessageBox.information(self, 'نجح', 'تم فتح التقرير في المتصفح')\n            \n        except Exception as e:\n            QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء إنشاء التقرير:\\n{str(e)}')\n","size_bytes":22879},"modules/expenses.py":{"content":"from datetime import datetime\n\nclass ExpenseManager:\n    def __init__(self, db):\n        self.db = db\n    \n    def add_expense(self, category, amount, expense_date, description=''):\n        query = '''\n            INSERT INTO expenses (category, amount, expense_date, description)\n            VALUES (?, ?, ?, ?)\n        '''\n        self.db.execute(query, (category, amount, expense_date, description))\n        return True\n    \n    def get_all_expenses(self):\n        query = 'SELECT * FROM expenses ORDER BY expense_date DESC'\n        return self.db.fetchall(query)\n    \n    def get_total_expenses(self):\n        query = 'SELECT SUM(amount) FROM expenses'\n        result = self.db.fetchone(query)\n        return result[0] if result[0] else 0\n    \n    def get_monthly_expenses(self, year, month):\n        query = '''\n            SELECT SUM(amount) \n            FROM expenses \n            WHERE strftime('%Y', expense_date) = ? \n            AND strftime('%m', expense_date) = ?\n        '''\n        result = self.db.fetchone(query, (str(year), f'{month:02d}'))\n        return result[0] if result[0] else 0\n    \n    def get_expenses_by_category(self):\n        query = '''\n            SELECT category, SUM(amount) as total\n            FROM expenses\n            GROUP BY category\n            ORDER BY total DESC\n        '''\n        return self.db.fetchall(query)\n    \n    def get_expense(self, expense_id):\n        query = 'SELECT * FROM expenses WHERE id = ?'\n        return self.db.fetchone(query, (expense_id,))\n    \n    def update_expense(self, expense_id, category, amount, expense_date, description=''):\n        query = '''\n            UPDATE expenses \n            SET category = ?, amount = ?, expense_date = ?, description = ?\n            WHERE id = ?\n        '''\n        self.db.execute(query, (category, amount, expense_date, description, expense_id))\n        return True\n    \n    def delete_expense(self, expense_id):\n        query = 'DELETE FROM expenses WHERE id = ?'\n        self.db.execute(query, (expense_id,))\n        return True\n","size_bytes":2042},"ui/__init__.py":{"content":"# UI Package\n","size_bytes":13},"ui/settings_widget.py":{"content":"from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, \n                             QPushButton, QComboBox, QGroupBox, QDateEdit, QSpinBox,\n                             QMessageBox, QFileDialog)\nfrom PyQt6.QtCore import Qt, pyqtSignal, QDate\nfrom PyQt6.QtGui import QFont\nfrom datetime import datetime, timedelta\nfrom modules.reports import ReportGenerator\nfrom modules.db_import import DatabaseImportDialog\n\nclass SettingsWidget(QWidget):\n    theme_changed = pyqtSignal(str)\n    \n    def __init__(self, db=None):\n        super().__init__()\n        self.db = db\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        header = QLabel('الإعدادات')\n        header.setFont(QFont('Arial', 24, QFont.Weight.Bold))\n        header.setStyleSheet('color: #1abc9c; padding: 20px;')\n        layout.addWidget(header, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        theme_group = QGroupBox('المظهر')\n        theme_layout = QVBoxLayout()\n        \n        theme_label = QLabel('الوضع:')\n        theme_layout.addWidget(theme_label, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        self.theme_combo = QComboBox()\n        self.theme_combo.addItems(['الوضع الليلي', 'الوضع الفاتح'])\n        self.theme_combo.currentTextChanged.connect(self.change_theme)\n        theme_layout.addWidget(self.theme_combo)\n        \n        theme_group.setLayout(theme_layout)\n        layout.addWidget(theme_group)\n        \n        reports_group = QGroupBox('التقارير')\n        reports_layout = QVBoxLayout()\n        \n        daily_layout = QHBoxLayout()\n        daily_label = QLabel('تقرير يومي:')\n        daily_layout.addWidget(daily_label, alignment=Qt.AlignmentFlag.AlignRight)\n        self.daily_date = QDateEdit()\n        self.daily_date.setDate(QDate.currentDate())\n        self.daily_date.setCalendarPopup(True)\n        daily_layout.addWidget(self.daily_date)\n        daily_btn = QPushButton('📄 إنشاء')\n        daily_btn.clicked.connect(self.generate_daily_report)\n        daily_layout.addWidget(daily_btn)\n        reports_layout.addLayout(daily_layout)\n        \n        weekly_layout = QHBoxLayout()\n        weekly_label = QLabel('تقرير أسبوعي:')\n        weekly_layout.addWidget(weekly_label, alignment=Qt.AlignmentFlag.AlignRight)\n        self.weekly_start = QDateEdit()\n        self.weekly_start.setDate(QDate.currentDate().addDays(-7))\n        self.weekly_start.setCalendarPopup(True)\n        weekly_layout.addWidget(self.weekly_start)\n        weekly_to_label = QLabel('إلى')\n        weekly_layout.addWidget(weekly_to_label)\n        self.weekly_end = QDateEdit()\n        self.weekly_end.setDate(QDate.currentDate())\n        self.weekly_end.setCalendarPopup(True)\n        weekly_layout.addWidget(self.weekly_end)\n        weekly_btn = QPushButton('📄 إنشاء')\n        weekly_btn.clicked.connect(self.generate_weekly_report)\n        weekly_layout.addWidget(weekly_btn)\n        reports_layout.addLayout(weekly_layout)\n        \n        monthly_layout = QHBoxLayout()\n        monthly_label = QLabel('تقرير شهري:')\n        monthly_layout.addWidget(monthly_label, alignment=Qt.AlignmentFlag.AlignRight)\n        self.monthly_month = QComboBox()\n        self.monthly_month.addItems([\n            'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',\n            'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'\n        ])\n        self.monthly_month.setCurrentIndex(datetime.now().month - 1)\n        monthly_layout.addWidget(self.monthly_month)\n        self.monthly_year = QSpinBox()\n        self.monthly_year.setRange(2000, 2100)\n        self.monthly_year.setValue(datetime.now().year)\n        monthly_layout.addWidget(self.monthly_year)\n        monthly_btn = QPushButton('📄 إنشاء')\n        monthly_btn.clicked.connect(self.generate_monthly_report)\n        monthly_layout.addWidget(monthly_btn)\n        reports_layout.addLayout(monthly_layout)\n        \n        yearly_layout = QHBoxLayout()\n        yearly_label = QLabel('تقرير سنوي:')\n        yearly_layout.addWidget(yearly_label, alignment=Qt.AlignmentFlag.AlignRight)\n        self.yearly_year = QSpinBox()\n        self.yearly_year.setRange(2000, 2100)\n        self.yearly_year.setValue(datetime.now().year)\n        yearly_layout.addWidget(self.yearly_year)\n        yearly_btn = QPushButton('📄 إنشاء')\n        yearly_btn.clicked.connect(self.generate_yearly_report)\n        yearly_layout.addWidget(yearly_btn)\n        reports_layout.addLayout(yearly_layout)\n        \n        reports_group.setLayout(reports_layout)\n        layout.addWidget(reports_group)\n        \n        info_group = QGroupBox('معلومات البرنامج')\n        info_layout = QVBoxLayout()\n        \n        info_text = QLabel('''\n        <div style=\"text-align: right; direction: rtl;\">\n        <h3>دار الحياة - نظام المحاسبة</h3>\n        <p>النسخة: 1.0.0</p>\n        <p>تطبيق محاسبة متكامل لمؤسسة دار الحياة</p>\n        <p>للطب النفسي وعلاج الإدمان</p>\n        <br>\n        <p>© 2025 جميع الحقوق محفوظة</p>\n        </div>\n        ''')\n        info_text.setWordWrap(True)\n        info_layout.addWidget(info_text)\n        \n        info_group.setLayout(info_layout)\n        layout.addWidget(info_group)\n        \n        db_group = QGroupBox('قاعدة البيانات')\n        db_layout = QVBoxLayout()\n        \n        import_btn = QPushButton('📁 استيراد قاعدة بيانات')\n        import_btn.clicked.connect(self.import_database)\n        db_layout.addWidget(import_btn)\n        \n        db_group.setLayout(db_layout)\n        layout.addWidget(db_group)\n        \n        layout.addStretch()\n        \n        self.setLayout(layout)\n    \n    def change_theme(self, theme):\n        self.theme_changed.emit(theme)\n    \n    def generate_daily_report(self):\n        if not self.db:\n            QMessageBox.warning(self, 'خطأ', 'لم يتم تهيئة قاعدة البيانات')\n            return\n        \n        date = self.daily_date.date().toString('yyyy-MM-dd')\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, 'حفظ التقرير اليومي', \n            f'تقرير_يومي_{date}.html',\n            'HTML Files (*.html)'\n        )\n        \n        if file_path:\n            try:\n                report_gen = ReportGenerator(self.db)\n                report_gen.generate_daily_report(date, file_path)\n                QMessageBox.information(self, 'نجح', f'تم إنشاء التقرير بنجاح في:\\n{file_path}')\n            except Exception as e:\n                QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء إنشاء التقرير:\\n{str(e)}')\n    \n    def generate_weekly_report(self):\n        if not self.db:\n            QMessageBox.warning(self, 'خطأ', 'لم يتم تهيئة قاعدة البيانات')\n            return\n        \n        start_date = self.weekly_start.date().toString('yyyy-MM-dd')\n        end_date = self.weekly_end.date().toString('yyyy-MM-dd')\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, 'حفظ التقرير الأسبوعي', \n            f'تقرير_أسبوعي_{start_date}_إلى_{end_date}.html',\n            'HTML Files (*.html)'\n        )\n        \n        if file_path:\n            try:\n                report_gen = ReportGenerator(self.db)\n                report_gen.generate_weekly_report(start_date, end_date, file_path)\n                QMessageBox.information(self, 'نجح', f'تم إنشاء التقرير بنجاح في:\\n{file_path}')\n            except Exception as e:\n                QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء إنشاء التقرير:\\n{str(e)}')\n    \n    def generate_monthly_report(self):\n        if not self.db:\n            QMessageBox.warning(self, 'خطأ', 'لم يتم تهيئة قاعدة البيانات')\n            return\n        \n        month = self.monthly_month.currentIndex() + 1\n        year = self.monthly_year.value()\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, 'حفظ التقرير الشهري', \n            f'تقرير_شهري_{year}_{month:02d}.html',\n            'HTML Files (*.html)'\n        )\n        \n        if file_path:\n            try:\n                report_gen = ReportGenerator(self.db)\n                report_gen.generate_monthly_report(year, month, file_path)\n                QMessageBox.information(self, 'نجح', f'تم إنشاء التقرير بنجاح في:\\n{file_path}')\n            except Exception as e:\n                QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء إنشاء التقرير:\\n{str(e)}')\n    \n    def generate_yearly_report(self):\n        if not self.db:\n            QMessageBox.warning(self, 'خطأ', 'لم يتم تهيئة قاعدة البيانات')\n            return\n        \n        year = self.yearly_year.value()\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, 'حفظ التقرير السنوي', \n            f'تقرير_سنوي_{year}.html',\n            'HTML Files (*.html)'\n        )\n        \n        if file_path:\n            try:\n                report_gen = ReportGenerator(self.db)\n                report_gen.generate_yearly_report(year, file_path)\n                QMessageBox.information(self, 'نجح', f'تم إنشاء التقرير بنجاح في:\\n{file_path}')\n            except Exception as e:\n                QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء إنشاء التقرير:\\n{str(e)}')\n    \n    def import_database(self):\n        if self.db:\n            dialog = DatabaseImportDialog(self.db.db_path, self)\n            dialog.exec()\n","size_bytes":9897},"main.py":{"content":"import sys\nimport os\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, \n                             QHBoxLayout, QPushButton, QLabel, QStackedWidget,\n                             QMessageBox, QLineEdit, QFrame)\nfrom PyQt6.QtCore import Qt, QCoreApplication, QTimer\nfrom PyQt6.QtGui import QFont, QPalette, QColor, QKeyEvent\nimport qdarkstyle\nfrom typing import cast\nimport shutil\nfrom datetime import datetime\n\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n\nfrom db.database import Database\nfrom modules.patients import PatientManager\nfrom modules.payments import PaymentManager\nfrom modules.expenses import ExpenseManager\nfrom modules.employees import EmployeeManager\nfrom modules.auth import AuthManager\nfrom ui.dashboard import DashboardWidget\nfrom ui.patients_widget import PatientsWidget\nfrom ui.payments_widget import PaymentsWidget\nfrom ui.expenses_widget import ExpensesWidget\nfrom ui.employees_widget import EmployeesWidget\nfrom ui.cigarettes_widget import CigarettesWidget\nfrom ui.settings_widget import SettingsWidget\nfrom ui.calculator_widget import CalculatorWidget\nfrom ui.import_patients_widget import ImportPatientsWidget  # --- NEW FEATURE ---\nfrom ui.text_editor_widget import TextEditorWidget  # --- NEW FEATURE ---\n\nclass LoginWindow(QWidget):\n    def __init__(self, main_app):\n        super().__init__()\n        self.main_app = main_app\n        self.setWindowTitle('دار الحياة - تسجيل الدخول')\n        self.setFixedSize(400, 300)\n        self.setup_ui()\n        \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        layout.setContentsMargins(40, 30, 40, 30)\n        \n        title1 = QLabel('دار الحياة')\n        title1.setFont(QFont('Arial', 20, QFont.Weight.Bold))\n        title1.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        layout.addWidget(title1)\n        \n        title2 = QLabel('للطب النفسي وعلاج الإدمان')\n        title2.setFont(QFont('Arial', 14))\n        title2.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        layout.addWidget(title2)\n        \n        layout.addSpacing(30)\n        \n        self.username = QLineEdit()\n        self.username.setPlaceholderText('اسم المستخدم')\n        self.username.setAlignment(Qt.AlignmentFlag.AlignRight)\n        self.username.setFixedHeight(40)\n        layout.addWidget(self.username)\n        \n        self.password = QLineEdit()\n        self.password.setPlaceholderText('كلمة المرور')\n        self.password.setEchoMode(QLineEdit.EchoMode.Password)\n        self.password.setAlignment(Qt.AlignmentFlag.AlignRight)\n        self.password.setFixedHeight(40)\n        self.password.returnPressed.connect(self.login)\n        layout.addWidget(self.password)\n        \n        layout.addSpacing(10)\n        \n        login_btn = QPushButton('دخول')\n        login_btn.setFixedHeight(45)\n        login_btn.setFont(QFont('Arial', 12, QFont.Weight.Bold))\n        login_btn.clicked.connect(self.login)\n        layout.addWidget(login_btn)\n        \n        self.setLayout(layout)\n    \n    def login(self):\n        username = self.username.text()\n        password = self.password.text()\n        \n        auth_mgr = AuthManager(self.main_app.db)\n        user = auth_mgr.authenticate(username, password)\n        \n        if user:\n            self.main_app.current_user = user\n            self.main_app.show_main_window()\n            self.close()\n        else:\n            QMessageBox.warning(self, 'خطأ', 'اسم المستخدم أو كلمة المرور غير صحيحة')\n\nclass MainWindow(QMainWindow):\n    def __init__(self, current_user=None):  # --- NEW FEATURE: User Permissions ---\n        super().__init__()\n        self.current_user = current_user  # --- NEW FEATURE: User Permissions ---\n        self.db = Database('dar_alhayat_accounting/db/dar_alhayat.db')\n        self.patient_mgr = PatientManager(self.db)\n        self.payment_mgr = PaymentManager(self.db)\n        self.expense_mgr = ExpenseManager(self.db)\n        self.employee_mgr = EmployeeManager(self.db)\n        self.current_theme = 'dark'\n        self.sidebar_widget = None\n        self.is_fullscreen = False\n        \n        self.setWindowTitle('دار الحياة - نظام المحاسبة')\n        self.setMinimumSize(1200, 700)\n        self.setup_ui()\n        self.setup_auto_save()\n    \n    def setup_ui(self):\n        central_widget = QWidget()\n        self.setCentralWidget(central_widget)\n        \n        main_layout = QHBoxLayout()\n        main_layout.setContentsMargins(0, 0, 0, 0)\n        main_layout.setSpacing(0)\n        \n        self.stacked_widget = QStackedWidget()\n        \n        self.dashboard = DashboardWidget(self.db, self.patient_mgr, \n                                        self.payment_mgr, self.expense_mgr, \n                                        self.employee_mgr)\n        # --- NEW FEATURE: Pass current_user to widgets for permission checks ---\n        self.patients_widget = PatientsWidget(self.db, self.patient_mgr, self.payment_mgr, self.current_user)\n        self.payments_widget = PaymentsWidget(self.db, self.payment_mgr, self.patient_mgr, self.current_user)\n        self.expenses_widget = ExpensesWidget(self.db, self.expense_mgr, self.current_user)\n        self.employees_widget = EmployeesWidget(self.db, self.employee_mgr, self.current_user)\n        self.cigarettes_widget = CigarettesWidget(self.db, self.patient_mgr, self.current_user)  # --- FIX (تمرير المستخدم الحالي) ---\n        self.import_patients_widget = ImportPatientsWidget(self.db, self.patient_mgr)  # --- NEW FEATURE ---\n        self.text_editor_widget = TextEditorWidget()  # --- NEW FEATURE ---\n        self.calculator_widget = CalculatorWidget()\n        self.settings_widget = SettingsWidget(self.db)\n        self.settings_widget.theme_changed.connect(self.change_theme)\n        \n        self.stacked_widget.addWidget(self.dashboard)\n        self.stacked_widget.addWidget(self.patients_widget)\n        self.stacked_widget.addWidget(self.payments_widget)\n        self.stacked_widget.addWidget(self.expenses_widget)\n        self.stacked_widget.addWidget(self.employees_widget)\n        self.stacked_widget.addWidget(self.cigarettes_widget)\n        self.stacked_widget.addWidget(self.import_patients_widget)  # --- NEW FEATURE ---\n        self.stacked_widget.addWidget(self.text_editor_widget)  # --- NEW FEATURE ---\n        self.stacked_widget.addWidget(self.calculator_widget)\n        self.stacked_widget.addWidget(self.settings_widget)\n        \n        self.sidebar_widget = self.create_sidebar()\n        \n        main_layout.addWidget(self.stacked_widget)\n        main_layout.addWidget(self.sidebar_widget)\n        \n        central_widget.setLayout(main_layout)\n    \n    def create_sidebar(self):\n        sidebar = QFrame()\n        sidebar.setFixedWidth(220)\n        sidebar.setStyleSheet('''\n            QFrame {\n                background-color: #2c3e50;\n                border-left: 2px solid #34495e;\n            }\n            QPushButton {\n                background-color: transparent;\n                color: white;\n                text-align: right;\n                padding: 15px 20px;\n                border: none;\n                font-size: 14px;\n            }\n            QPushButton:hover {\n                background-color: #34495e;\n            }\n            QPushButton:pressed {\n                background-color: #1abc9c;\n            }\n        ''')\n        \n        layout = QVBoxLayout()\n        layout.setContentsMargins(0, 20, 0, 0)\n        layout.setSpacing(5)\n        \n        logo = QLabel('دار الحياة')\n        logo.setFont(QFont('Arial', 20, QFont.Weight.Bold))\n        logo.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        logo.setStyleSheet('color: white; padding: 20px;')\n        layout.addWidget(logo)\n        \n        buttons = [\n            ('🏠 لوحة التحكم', 0),\n            ('👥 المرضى', 1),\n            ('💰 المدفوعات', 2),\n            ('📊 المصروفات', 3),\n            ('👔 الموظفين', 4),\n            ('🚬 السجائر', 5),\n            ('📥 استيراد من Excel', 6),  # --- NEW FEATURE ---\n            ('📝 محرر النصوص', 7),  # --- NEW FEATURE ---\n            ('🔢 آلة حاسبة', 8),\n            ('⚙️ الإعدادات', 9),\n        ]\n        \n        for text, index in buttons:\n            btn = QPushButton(text)\n            btn.clicked.connect(lambda checked, i=index: self.change_page(i))\n            layout.addWidget(btn)\n        \n        layout.addStretch()\n        \n        exit_btn = QPushButton('🚪 خروج')\n        exit_btn.clicked.connect(self.logout)  # --- FIX (تعديل زر الخروج ليعود للتسجيل) ---\n        layout.addWidget(exit_btn)\n        \n        sidebar.setLayout(layout)\n        return sidebar\n    \n    def change_page(self, index):\n        self.stacked_widget.setCurrentIndex(index)\n        if index == 0:\n            self.dashboard.refresh_data()\n        elif index == 5:\n            self.cigarettes_widget.load_cigarettes_data()\n    \n    def change_theme(self, theme_name):\n        app = cast(QApplication, QApplication.instance())\n        if not app:\n            return\n            \n        if theme_name == 'الوضع الفاتح' and self.current_theme != 'light':\n            self.current_theme = 'light'\n            light_style = '''\n                QMainWindow, QWidget {\n                    background-color: #ffffff;\n                    color: #000000;\n                }\n                QLabel {\n                    color: #000000;\n                    font-weight: 500;\n                }\n                QGroupBox {\n                    border: 2px solid #667eea;\n                    border-radius: 8px;\n                    margin-top: 12px;\n                    padding: 18px;\n                    background-color: #ffffff;\n                    font-weight: bold;\n                }\n                QGroupBox::title {\n                    color: #4a5bde;\n                    subcontrol-origin: margin;\n                    left: 10px;\n                    padding: 0 8px;\n                    font-weight: bold;\n                    font-size: 15px;\n                }\n                QPushButton {\n                    background-color: #4a5bde;\n                    color: #ffffff;\n                    border: none;\n                    padding: 10px 20px;\n                    border-radius: 6px;\n                    font-size: 14px;\n                    font-weight: bold;\n                }\n                QPushButton:hover {\n                    background-color: #3d4bc7;\n                }\n                QPushButton:pressed {\n                    background-color: #1abc9c;\n                }\n                QLineEdit, QTextEdit, QSpinBox, QDoubleSpinBox, QDateEdit, QComboBox {\n                    background-color: #ffffff;\n                    color: #000000;\n                    border: 2px solid #c0c0c0;\n                    border-radius: 6px;\n                    padding: 10px;\n                    font-size: 13px;\n                }\n                QLineEdit:focus, QTextEdit:focus, QSpinBox:focus, QDoubleSpinBox:focus, QDateEdit:focus, QComboBox:focus {\n                    border: 2px solid #4a5bde;\n                }\n                QComboBox::drop-down {\n                    border: none;\n                    padding-right: 10px;\n                }\n                QComboBox QAbstractItemView {\n                    background-color: #ffffff;\n                    color: #000000;\n                    selection-background-color: #4a5bde;\n                    selection-color: #ffffff;\n                    border: 2px solid #4a5bde;\n                }\n                QTableWidget {\n                    background-color: #ffffff;\n                    gridline-color: #c0c0c0;\n                    border: 2px solid #c0c0c0;\n                    border-radius: 6px;\n                }\n                QTableWidget::item {\n                    color: #000000;\n                    padding: 8px;\n                    font-size: 13px;\n                }\n                QTableWidget::item:selected {\n                    background-color: #4a5bde;\n                    color: #ffffff;\n                }\n                QHeaderView::section {\n                    background-color: #4a5bde;\n                    color: #ffffff;\n                    padding: 10px;\n                    border: none;\n                    font-weight: bold;\n                    font-size: 14px;\n                }\n                QScrollBar:vertical {\n                    background-color: #f0f0f0;\n                    width: 14px;\n                    border-radius: 7px;\n                }\n                QScrollBar::handle:vertical {\n                    background-color: #4a5bde;\n                    border-radius: 7px;\n                    min-height: 20px;\n                }\n                QScrollBar::handle:vertical:hover {\n                    background-color: #3d4bc7;\n                }\n                QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {\n                    height: 0px;\n                }\n                QCheckBox {\n                    color: #000000;\n                    font-weight: 500;\n                }\n                QCheckBox::indicator {\n                    width: 18px;\n                    height: 18px;\n                    border: 2px solid #4a5bde;\n                    border-radius: 4px;\n                }\n                QCheckBox::indicator:checked {\n                    background-color: #4a5bde;\n                }\n                QRadioButton {\n                    color: #000000;\n                    font-weight: 500;\n                }\n                QRadioButton::indicator {\n                    width: 18px;\n                    height: 18px;\n                    border: 2px solid #4a5bde;\n                    border-radius: 9px;\n                }\n                QRadioButton::indicator:checked {\n                    background-color: #4a5bde;\n                }\n            '''\n            app.setStyleSheet(light_style)\n            \n            if self.sidebar_widget:\n                self.sidebar_widget.setStyleSheet('''\n                    QFrame {\n                        background-color: #667eea;\n                        border-left: 2px solid #764ba2;\n                    }\n                    QPushButton {\n                        background-color: transparent;\n                        color: white;\n                        text-align: right;\n                        padding: 15px 20px;\n                        border: none;\n                        font-size: 14px;\n                    }\n                    QPushButton:hover {\n                        background-color: #764ba2;\n                    }\n                    QPushButton:pressed {\n                        background-color: #1abc9c;\n                    }\n                ''')\n        elif theme_name == 'الوضع الليلي' and self.current_theme != 'dark':\n            self.current_theme = 'dark'\n            app.setStyleSheet(qdarkstyle.load_stylesheet(qt_api='pyqt6'))\n            \n            if self.sidebar_widget:\n                self.sidebar_widget.setStyleSheet('''\n                    QFrame {\n                        background-color: #2c3e50;\n                        border-left: 2px solid #34495e;\n                    }\n                    QPushButton {\n                        background-color: transparent;\n                        color: white;\n                        text-align: right;\n                        padding: 15px 20px;\n                        border: none;\n                        font-size: 14px;\n                    }\n                    QPushButton:hover {\n                        background-color: #34495e;\n                    }\n                    QPushButton:pressed {\n                        background-color: #1abc9c;\n                    }\n                ''')\n    \n    def setup_auto_save(self):\n        self.auto_save_timer = QTimer(self)\n        self.auto_save_timer.timeout.connect(self.auto_save_database)\n        self.auto_save_timer.start(300000)\n    \n    def auto_save_database(self):\n        try:\n            if self.db and self.db.conn:\n                self.db.conn.commit()\n                backup_dir = 'dar_alhayat_accounting/db/backups'\n                os.makedirs(backup_dir, exist_ok=True)\n                backup_file = os.path.join(\n                    backup_dir, \n                    f'auto_backup_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.db'\n                )\n                shutil.copy2(self.db.db_path, backup_file)\n                \n                backups = sorted([f for f in os.listdir(backup_dir) if f.startswith('auto_backup_')])\n                if len(backups) > 10:\n                    for old_backup in backups[:-10]:\n                        os.remove(os.path.join(backup_dir, old_backup))\n                \n        except Exception as e:\n            print(f'خطأ في الحفظ التلقائي: {str(e)}')\n    \n    def toggle_fullscreen(self):\n        if self.is_fullscreen:\n            self.showNormal()\n            self.is_fullscreen = False\n        else:\n            self.showFullScreen()\n            self.is_fullscreen = True\n    \n    def logout(self):\n        # --- NEW (تسجيل الخروج والعودة لصفحة التسجيل) ---\n        try:\n            # Log logout to audit_log\n            if self.current_user:\n                user_id = self.current_user.get('id')\n                username = self.current_user.get('username')\n                \n                query = '''\n                    INSERT INTO audit_log (\n                        user_id, username, action_type, action_description, created_at\n                    )\n                    VALUES (?, ?, ?, ?, ?)\n                '''\n                self.db.execute(query, (\n                    user_id,\n                    username,\n                    'تسجيل خروج',\n                    f'قام المستخدم {username} بتسجيل الخروج',\n                    datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                ))\n        except Exception as e:\n            print(f'فشل تسجيل الخروج في audit_log: {str(e)}')\n        \n        # Close main window and show login\n        app = QApplication.instance()\n        if hasattr(app, 'show_login'):\n            self.hide()\n            app.login_window.show()\n        else:\n            self.close()\n    \n    def keyPressEvent(self, event: QKeyEvent):\n        if event.key() == Qt.Key.Key_F11:\n            self.toggle_fullscreen()\n        else:\n            super().keyPressEvent(event)\n\nclass Application(QApplication):\n    def __init__(self):\n        super().__init__(sys.argv)\n        self.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        \n        default_font = QFont(\"Arial\", 12, QFont.Weight.Bold)\n        self.setFont(default_font)\n        \n        self.setStyleSheet(qdarkstyle.load_stylesheet(qt_api='pyqt6'))\n        \n        self.db = Database('dar_alhayat_accounting/db/dar_alhayat.db')\n        auth_mgr = AuthManager(self.db)\n        auth_mgr.initialize_default_users()\n        \n        self.current_user = None\n        self.login_window = LoginWindow(self)\n        self.main_window = None\n    \n    def show_login(self):\n        self.login_window.show()\n    \n    def show_main_window(self):\n        self.main_window = MainWindow(self.current_user)  # --- NEW FEATURE: User Permissions ---\n        self.main_window.show()\n\nif __name__ == '__main__':\n    app = Application()\n    app.show_login()\n    sys.exit(app.exec())\n","size_bytes":19710},"modules/payments.py":{"content":"from datetime import datetime\n\nclass PaymentManager:\n    def __init__(self, db):\n        self.db = db\n    \n    def add_payment(self, patient_id, amount, payment_date, notes=''):\n        query = '''\n            INSERT INTO payments (patient_id, amount, payment_date, notes)\n            VALUES (?, ?, ?, ?)\n        '''\n        self.db.execute(query, (patient_id, amount, payment_date, notes))\n        return True\n    \n    def get_patient_payments(self, patient_id):\n        query = '''\n            SELECT * FROM payments \n            WHERE patient_id = ? \n            ORDER BY payment_date DESC\n        '''\n        return self.db.fetchall(query, (patient_id,))\n    \n    def get_all_payments(self):\n        query = '''\n            SELECT p.*, pt.name \n            FROM payments p\n            JOIN patients pt ON p.patient_id = pt.id\n            ORDER BY p.payment_date DESC\n        '''\n        return self.db.fetchall(query)\n    \n    def get_total_revenue(self):\n        query = 'SELECT SUM(amount) FROM payments'\n        result = self.db.fetchone(query)\n        return result[0] if result[0] else 0\n    \n    def get_monthly_revenue(self, year, month):\n        query = '''\n            SELECT SUM(amount) \n            FROM payments \n            WHERE strftime('%Y', payment_date) = ? \n            AND strftime('%m', payment_date) = ?\n        '''\n        result = self.db.fetchone(query, (str(year), f'{month:02d}'))\n        return result[0] if result[0] else 0\n    \n    def get_payment(self, payment_id):\n        query = 'SELECT * FROM payments WHERE id = ?'\n        return self.db.fetchone(query, (payment_id,))\n    \n    def update_payment(self, payment_id, patient_id, amount, payment_date, notes=''):\n        query = '''\n            UPDATE payments \n            SET patient_id = ?, amount = ?, payment_date = ?, notes = ?\n            WHERE id = ?\n        '''\n        self.db.execute(query, (patient_id, amount, payment_date, notes, payment_id))\n        return True\n    \n    def delete_payment(self, payment_id):\n        query = 'DELETE FROM payments WHERE id = ?'\n        self.db.execute(query, (payment_id,))\n        return True\n","size_bytes":2129},"ui/calculator_widget.py":{"content":"from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, \n                             QLineEdit, QGridLayout)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\n\nclass CalculatorWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.current_value = \"0\"\n        self.previous_value = \"\"\n        self.operation = \"\"\n        self.new_number = True\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        layout.setContentsMargins(20, 20, 20, 20)\n        layout.setSpacing(10)\n        \n        title_layout = QHBoxLayout()\n        title_label = QPushButton('🔢 آلة حاسبة')\n        title_label.setFont(QFont('Arial', 16, QFont.Weight.Bold))\n        title_label.setStyleSheet('''\n            QPushButton {\n                background-color: #667eea;\n                color: white;\n                padding: 15px;\n                border-radius: 8px;\n                border: none;\n            }\n        ''')\n        title_layout.addWidget(title_label)\n        layout.addLayout(title_layout)\n        \n        self.display = QLineEdit()\n        self.display.setText(\"0\")\n        self.display.setAlignment(Qt.AlignmentFlag.AlignLeft)  # --- NEW FEATURE: LTR for numbers ---\n        self.display.setLayoutDirection(Qt.LayoutDirection.LeftToRight)  # --- NEW FEATURE: LTR for numbers ---\n        self.display.setReadOnly(True)\n        self.display.setFont(QFont('Arial', 28, QFont.Weight.Bold))\n        self.display.setStyleSheet('''\n            QLineEdit {\n                background-color: #2c3e50;\n                color: #ecf0f1;\n                border: 2px solid #667eea;\n                border-radius: 10px;\n                padding: 20px;\n                min-height: 60px;\n            }\n        ''')\n        layout.addWidget(self.display)\n        \n        buttons_layout = QGridLayout()\n        buttons_layout.setSpacing(8)\n        \n        # --- FIX (إصلاح الآلة الحاسبة - إضافة أزرار العمليات الحسابية) ---\n        buttons = [\n            ['7', '8', '9', '÷'],\n            ['4', '5', '6', '×'],\n            ['1', '2', '3', '-'],\n            ['0', '.', '=', '+'],\n            ['C', '', '', '']\n        ]\n        \n        for row_idx, row in enumerate(buttons):\n            for col_idx, button_text in enumerate(row):\n                if button_text == '':\n                    continue\n                    \n                btn = QPushButton(button_text)\n                btn.setFont(QFont('Arial', 16, QFont.Weight.Bold))\n                btn.setMinimumHeight(60)\n                \n                # --- FIX (تنسيق الأزرار) ---\n                if button_text == '=':\n                    btn.setStyleSheet('''\n                        QPushButton {\n                            background-color: #1abc9c;\n                            color: white;\n                            border-radius: 8px;\n                            border: none;\n                        }\n                        QPushButton:hover {\n                            background-color: #16a085;\n                        }\n                        QPushButton:pressed {\n                            background-color: #138d75;\n                        }\n                    ''')\n                elif button_text in ['÷', '×', '-', '+']:\n                    btn.setStyleSheet('''\n                        QPushButton {\n                            background-color: #e67e22;\n                            color: white;\n                            border-radius: 8px;\n                            border: none;\n                        }\n                        QPushButton:hover {\n                            background-color: #d35400;\n                        }\n                        QPushButton:pressed {\n                            background-color: #a04000;\n                        }\n                    ''')\n                elif button_text == 'C':\n                    btn.setStyleSheet('''\n                        QPushButton {\n                            background-color: #e74c3c;\n                            color: white;\n                            border-radius: 8px;\n                            border: none;\n                        }\n                        QPushButton:hover {\n                            background-color: #c0392b;\n                        }\n                        QPushButton:pressed {\n                            background-color: #a93226;\n                        }\n                    ''')\n                else:\n                    btn.setStyleSheet('''\n                        QPushButton {\n                            background-color: #34495e;\n                            color: white;\n                            border-radius: 8px;\n                            border: none;\n                        }\n                        QPushButton:hover {\n                            background-color: #2c3e50;\n                        }\n                        QPushButton:pressed {\n                            background-color: #1a252f;\n                        }\n                    ''')\n                \n                btn.clicked.connect(lambda checked, text=button_text: self.button_clicked(text))\n                buttons_layout.addWidget(btn, row_idx, col_idx)\n        \n        layout.addLayout(buttons_layout)\n        self.setLayout(layout)\n    \n    def button_clicked(self, button_text):\n        # --- FIX (معالجة رمز القسمة ÷) ---\n        if button_text.isdigit():\n            self.handle_digit(button_text)\n        elif button_text == '.':\n            self.handle_decimal()\n        elif button_text in ['/', '÷', '×', '-', '+']:\n            # Convert ÷ to / for internal processing\n            if button_text == '÷':\n                button_text = '/'\n            self.handle_operation(button_text)\n        elif button_text == '=':\n            self.handle_equals()\n        elif button_text == 'C':\n            self.handle_clear()\n        elif button_text == '⌫':\n            self.handle_backspace()\n        elif button_text == '%':\n            self.handle_percent()\n        elif button_text == '±':\n            self.handle_sign_change()\n    \n    def handle_digit(self, digit):\n        if self.new_number:\n            self.current_value = digit\n            self.new_number = False\n        else:\n            if self.current_value == \"0\":\n                self.current_value = digit\n            else:\n                self.current_value += digit\n        self.update_display()\n    \n    def handle_decimal(self):\n        if self.new_number:\n            self.current_value = \"0.\"\n            self.new_number = False\n        elif '.' not in self.current_value:\n            self.current_value += '.'\n        self.update_display()\n    \n    def handle_operation(self, op):\n        if self.operation and not self.new_number:\n            self.handle_equals()\n        \n        self.previous_value = self.current_value\n        self.operation = op\n        self.new_number = True\n    \n    def handle_equals(self):\n        if not self.operation or not self.previous_value:\n            return\n        \n        try:\n            prev = float(self.previous_value)\n            curr = float(self.current_value)\n            \n            if self.operation == '+':\n                result = prev + curr\n            elif self.operation == '-':\n                result = prev - curr\n            elif self.operation == '×':\n                result = prev * curr\n            elif self.operation == '/':\n                if curr == 0:\n                    self.current_value = \"خطأ\"\n                    self.update_display()\n                    self.reset()\n                    return\n                result = prev / curr\n            \n            if result == int(result):\n                self.current_value = str(int(result))\n            else:\n                self.current_value = str(round(result, 8))\n            \n            self.update_display()\n            self.previous_value = \"\"\n            self.operation = \"\"\n            self.new_number = True\n            \n        except Exception:\n            self.current_value = \"خطأ\"\n            self.update_display()\n            self.reset()\n    \n    def handle_clear(self):\n        self.current_value = \"0\"\n        self.previous_value = \"\"\n        self.operation = \"\"\n        self.new_number = True\n        self.update_display()\n    \n    def handle_backspace(self):\n        if not self.new_number and len(self.current_value) > 1:\n            self.current_value = self.current_value[:-1]\n        else:\n            self.current_value = \"0\"\n            self.new_number = True\n        self.update_display()\n    \n    def handle_percent(self):\n        try:\n            value = float(self.current_value)\n            self.current_value = str(value / 100)\n            self.update_display()\n            self.new_number = True\n        except Exception:\n            pass\n    \n    def handle_sign_change(self):\n        try:\n            value = float(self.current_value)\n            self.current_value = str(-value)\n            self.update_display()\n        except Exception:\n            pass\n    \n    def reset(self):\n        self.previous_value = \"\"\n        self.operation = \"\"\n        self.new_number = True\n    \n    def update_display(self):\n        display_text = self.current_value\n        \n        if len(display_text) > 15:\n            try:\n                num = float(display_text)\n                display_text = f\"{num:.6e}\"\n            except:\n                display_text = display_text[:15]\n        \n        self.display.setText(display_text)\n","size_bytes":9617},"build_exe.py":{"content":"#!/usr/bin/env python3\nimport os\nimport subprocess\n\nprint('📦 بناء ملف تنفيذي EXE...')\nprint()\n\npyinstaller_command = [\n    'pyinstaller',\n    '--name=DarAlhayat',\n    '--windowed',\n    '--onefile',\n    '--add-data=db:db',\n    '--add-data=ui:ui',\n    '--add-data=modules:modules',\n    '--icon=assets/icon.ico' if os.path.exists('assets/icon.ico') else '',\n    'main.py'\n]\n\npyinstaller_command = [cmd for cmd in pyinstaller_command if cmd]\n\nprint('⚙️ تثبيت PyInstaller...')\nsubprocess.run(['pip', 'install', 'pyinstaller'], check=True)\nprint()\n\nprint('🔨 بناء البرنامج...')\nsubprocess.run(pyinstaller_command, check=True)\nprint()\n\nprint('✅ تم البناء بنجاح!')\nprint('📁 الملف التنفيذي موجود في: dist/DarAlhayat.exe')\n","size_bytes":790},"ui/patients_widget.py":{"content":"from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, \n                             QPushButton, QTableWidget, QTableWidgetItem, QDialog,\n                             QLineEdit, QComboBox, QDateEdit, QCheckBox, QSpinBox,\n                             QMessageBox, QFileDialog, QHeaderView, QScrollArea)\nfrom PyQt6.QtCore import Qt, QDate\nfrom PyQt6.QtGui import QFont\nfrom datetime import datetime\nimport os\nimport webbrowser\nimport tempfile\n\nclass AddPatientDialog(QDialog):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle('إضافة مريض جديد')\n        self.setFixedSize(500, 600)\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        self.name_input = QLineEdit()\n        self.name_input.setPlaceholderText('اسم المريض')\n        self.name_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('الاسم:'))\n        layout.addWidget(self.name_input)\n        \n        self.phone_input = QLineEdit()\n        self.phone_input.setPlaceholderText('رقم هاتف الأهل')\n        self.phone_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('هاتف الأهل:'))\n        layout.addWidget(self.phone_input)\n        \n        self.date_input = QDateEdit()\n        self.date_input.setDate(QDate.currentDate())\n        self.date_input.setCalendarPopup(True)\n        layout.addWidget(QLabel('تاريخ الدخول:'))\n        layout.addWidget(self.date_input)\n        \n        self.department_input = QComboBox()\n        self.department_input.addItems(['ديتوكس', 'ريكفري'])\n        layout.addWidget(QLabel('القسم:'))\n        layout.addWidget(self.department_input)\n        \n        self.cost_input = QLineEdit()\n        self.cost_input.setPlaceholderText('التكلفة اليومية')\n        self.cost_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('التكلفة اليومية:'))\n        layout.addWidget(self.cost_input)\n        \n        self.cigarettes_check = QCheckBox('يستلم سجائر')\n        layout.addWidget(self.cigarettes_check)\n        \n        self.cigarettes_count = QSpinBox()\n        self.cigarettes_count.setMaximum(100)\n        self.cigarettes_count.setEnabled(False)\n        self.cigarettes_check.toggled.connect(self.cigarettes_count.setEnabled)\n        layout.addWidget(QLabel('عدد السجائر:'))\n        layout.addWidget(self.cigarettes_count)\n        \n        btn_layout = QHBoxLayout()\n        save_btn = QPushButton('حفظ')\n        save_btn.clicked.connect(self.accept)\n        cancel_btn = QPushButton('إلغاء')\n        cancel_btn.clicked.connect(self.reject)\n        btn_layout.addWidget(cancel_btn)\n        btn_layout.addWidget(save_btn)\n        \n        layout.addLayout(btn_layout)\n        self.setLayout(layout)\n    \n    def get_data(self):\n        return {\n            'name': self.name_input.text(),\n            'family_phone': self.phone_input.text(),\n            'admission_date': self.date_input.date().toString('yyyy-MM-dd'),\n            'department': self.department_input.currentText(),\n            'daily_cost': float(self.cost_input.text()) if self.cost_input.text() else 0,\n            'receives_cigarettes': 1 if self.cigarettes_check.isChecked() else 0,\n            'cigarettes_count': self.cigarettes_count.value()\n        }\n\nclass PatientStatementDialog(QDialog):\n    def __init__(self, statement, parent=None):\n        super().__init__(parent)\n        self.statement = statement\n        patient = statement['patient']\n        self.setWindowTitle(f'كشف حساب المريض - {patient[1]}')\n        self.setMinimumSize(800, 600)\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        scroll = QScrollArea()\n        scroll.setWidgetResizable(True)\n        content_widget = QWidget()\n        content_layout = QVBoxLayout()\n        \n        patient = self.statement['patient']\n        \n        info_html = f'''\n        <div style=\"text-align: right; direction: rtl;\">\n        <h2 style=\"color: #1abc9c;\">كشف حساب تفصيلي</h2>\n        <h3>{patient[1]}</h3>\n        <p><b>رقم الهاتف:</b> {patient[2] if patient[2] else 'غير محدد'}</p>\n        <p><b>تاريخ الدخول:</b> {self.statement['admission_date'].strftime('%Y-%m-%d')}</p>\n        <p><b>القسم:</b> {patient[4]}</p>\n        <p><b>الحالة:</b> {patient[8]}</p>\n        '''\n        \n        if self.statement['discharge_date']:\n            info_html += f'<p><b>تاريخ التخرج:</b> {self.statement[\"discharge_date\"].strftime(\"%Y-%m-%d\")}</p>'\n        \n        info_html += f'''\n        <p><b>عدد الأيام:</b> {self.statement['days']} يوم</p>\n        </div>\n        '''\n        \n        info_label = QLabel(info_html)\n        info_label.setTextFormat(Qt.TextFormat.RichText)\n        content_layout.addWidget(info_label)\n        \n        expenses_html = f'''\n        <div style=\"text-align: right; direction: rtl; background-color: #34495e; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n        <h3 style=\"color: #1abc9c;\">المصروفات</h3>\n        <p><b>تكلفة الإقامة:</b> {self.statement['accommodation_cost']:.2f} جنيه ({self.statement['days']} يوم × {patient[5]:.2f} جنيه)</p>\n        '''\n        \n        if self.statement['cigarettes_cost'] > 0:\n            expenses_html += f'<p><b>تكلفة السجائر:</b> {self.statement[\"cigarettes_cost\"]:.2f} جنيه</p>'\n        \n        expenses_html += f'''\n        <p style=\"color: #e74c3c; font-size: 16px;\"><b>إجمالي المصروفات:</b> {self.statement['total_expenses']:.2f} جنيه</p>\n        </div>\n        '''\n        \n        expenses_label = QLabel(expenses_html)\n        expenses_label.setTextFormat(Qt.TextFormat.RichText)\n        content_layout.addWidget(expenses_label)\n        \n        payments_label = QLabel('<h3 style=\"text-align: right; color: #1abc9c;\">المدفوعات:</h3>')\n        payments_label.setTextFormat(Qt.TextFormat.RichText)\n        content_layout.addWidget(payments_label)\n        \n        payments_table = QTableWidget()\n        payments_table.setColumnCount(3)\n        payments_table.setHorizontalHeaderLabels(['التاريخ', 'المبلغ', 'ملاحظات'])\n        payments_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        payments_table.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        payments_table.setRowCount(len(self.statement['payments']))\n        \n        for row, payment in enumerate(self.statement['payments']):\n            payments_table.setItem(row, 0, QTableWidgetItem(payment[0]))\n            payments_table.setItem(row, 1, QTableWidgetItem(f'{payment[1]:.2f}'))\n            payments_table.setItem(row, 2, QTableWidgetItem(payment[2] if payment[2] else ''))\n        \n        content_layout.addWidget(payments_table)\n        \n        summary_html = f'''\n        <div style=\"text-align: right; direction: rtl; background-color: #2c3e50; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n        <h3 style=\"color: #1abc9c;\">الملخص النهائي</h3>\n        <p><b>إجمالي المصروفات:</b> {self.statement['total_expenses']:.2f} جنيه</p>\n        <p><b>إجمالي المدفوعات:</b> {self.statement['total_paid']:.2f} جنيه</p>\n        <p style=\"font-size: 18px; color: {'#e74c3c' if self.statement['balance'] > 0 else '#1abc9c'};\"><b>المتبقي:</b> {self.statement['balance']:.2f} جنيه</p>\n        </div>\n        '''\n        \n        summary_label = QLabel(summary_html)\n        summary_label.setTextFormat(Qt.TextFormat.RichText)\n        content_layout.addWidget(summary_label)\n        \n        content_widget.setLayout(content_layout)\n        scroll.setWidget(content_widget)\n        layout.addWidget(scroll)\n        \n        btn_layout = QHBoxLayout()\n        \n        print_btn = QPushButton('🖨️ طباعة / حفظ PDF')\n        print_btn.clicked.connect(self.print_statement)\n        btn_layout.addWidget(print_btn)\n        \n        close_btn = QPushButton('إغلاق')\n        close_btn.clicked.connect(self.close)\n        btn_layout.addWidget(close_btn)\n        \n        layout.addLayout(btn_layout)\n        self.setLayout(layout)\n    \n    def print_statement(self):\n        try:\n            patient = self.statement['patient']\n            \n            payments_rows = ''\n            for payment in self.statement['payments']:\n                notes = payment[2] if payment[2] else '-'\n                payments_rows += f'''\n                <tr>\n                    <td>{payment[0]}</td>\n                    <td>{payment[1]:.2f} جنيه</td>\n                    <td>{notes}</td>\n                </tr>\n                '''\n            \n            discharge_info = ''\n            if self.statement['discharge_date']:\n                discharge_info = f'<p><strong>تاريخ التخرج:</strong> {self.statement[\"discharge_date\"].strftime(\"%Y-%m-%d\")}</p>'\n            \n            cigarettes_info = ''\n            if self.statement['cigarettes_cost'] > 0:\n                cigarettes_info = f'<p><strong>تكلفة السجائر:</strong> {self.statement[\"cigarettes_cost\"]:.2f} جنيه</p>'\n            \n            html_content = f'''<!DOCTYPE html>\n<html dir=\"rtl\" lang=\"ar\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>كشف حساب المريض - {patient[1]}</title>\n    <style>\n        @media print {{\n            body {{\n                margin: 0;\n                padding: 20px;\n            }}\n            .no-print {{\n                display: none;\n            }}\n        }}\n        \n        body {{\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            direction: rtl;\n            text-align: right;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            padding: 20px;\n            margin: 0;\n        }}\n        \n        .container {{\n            max-width: 1000px;\n            margin: 0 auto;\n            background: white;\n            padding: 40px;\n            border-radius: 10px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }}\n        \n        .header {{\n            text-align: center;\n            border-bottom: 3px solid #667eea;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n        }}\n        \n        .header h1 {{\n            color: #667eea;\n            margin: 0;\n            font-size: 32px;\n            font-weight: bold;\n        }}\n        \n        .header h2 {{\n            color: #764ba2;\n            margin: 10px 0 0 0;\n            font-size: 24px;\n        }}\n        \n        .info-section {{\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 10px;\n            margin: 20px 0;\n        }}\n        \n        .info-section h3 {{\n            color: #667eea;\n            margin-top: 0;\n        }}\n        \n        .info-section p {{\n            margin: 8px 0;\n            font-size: 15px;\n        }}\n        \n        .expenses-section {{\n            background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%);\n            color: white;\n            padding: 20px;\n            border-radius: 10px;\n            margin: 20px 0;\n        }}\n        \n        .expenses-section h3 {{\n            margin-top: 0;\n        }}\n        \n        .expenses-section p {{\n            margin: 8px 0;\n            font-size: 15px;\n        }}\n        \n        .summary-section {{\n            background: linear-gradient(135deg, #2193b0 0%, #6dd5ed 100%);\n            color: white;\n            padding: 25px;\n            border-radius: 10px;\n            margin: 30px 0;\n            text-align: center;\n        }}\n        \n        .summary-section h3 {{\n            margin: 0 0 15px 0;\n            font-size: 24px;\n        }}\n        \n        .summary-section .balance {{\n            font-size: 36px;\n            font-weight: bold;\n            margin: 10px 0;\n        }}\n        \n        .details-table {{\n            width: 100%;\n            border-collapse: collapse;\n            margin: 30px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }}\n        \n        .details-table th {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 12px;\n            text-align: center;\n            font-weight: bold;\n        }}\n        \n        .details-table td {{\n            padding: 10px 12px;\n            border-bottom: 1px solid #ddd;\n            text-align: center;\n        }}\n        \n        .details-table tr:hover {{\n            background-color: #f5f5f5;\n        }}\n        \n        .footer {{\n            text-align: center;\n            margin-top: 40px;\n            padding-top: 20px;\n            border-top: 2px solid #eee;\n            color: #666;\n            font-size: 14px;\n        }}\n        \n        .print-button {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border: none;\n            padding: 15px 30px;\n            font-size: 16px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 20px auto;\n            display: block;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }}\n        \n        .print-button:hover {{\n            transform: translateY(-2px);\n            box-shadow: 0 6px 8px rgba(0,0,0,0.3);\n        }}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🏥 دار الحياة للطب النفسي وعلاج الإدمان</h1>\n            <h2>📋 كشف حساب تفصيلي</h2>\n            <div style=\"color: #666; font-size: 14px; margin-top: 10px;\">تاريخ الطباعة: {datetime.now().strftime('%Y-%m-%d %H:%M')}</div>\n        </div>\n        \n        <div class=\"info-section\">\n            <h3>معلومات المريض</h3>\n            <p><strong>الاسم:</strong> {patient[1]}</p>\n            <p><strong>رقم الهاتف:</strong> {patient[2] if patient[2] else 'غير محدد'}</p>\n            <p><strong>تاريخ الدخول:</strong> {self.statement[\"admission_date\"].strftime('%Y-%m-%d')}</p>\n            {discharge_info}\n            <p><strong>القسم:</strong> {patient[4]}</p>\n            <p><strong>الحالة:</strong> {patient[8]}</p>\n            <p><strong>عدد الأيام:</strong> {self.statement['days']} يوم</p>\n        </div>\n        \n        <div class=\"expenses-section\">\n            <h3>💸 المصروفات</h3>\n            <p><strong>تكلفة الإقامة:</strong> {self.statement[\"accommodation_cost\"]:.2f} جنيه ({self.statement['days']} يوم × {patient[5]:.2f} جنيه)</p>\n            {cigarettes_info}\n            <p style=\"font-size: 18px; margin-top: 15px;\"><strong>إجمالي المصروفات:</strong> {self.statement['total_expenses']:.2f} جنيه</p>\n        </div>\n        \n        <h3 style=\"color: #667eea; margin-top: 40px;\">💰 سجل المدفوعات</h3>\n        <table class=\"details-table\">\n            <tr>\n                <th>التاريخ</th>\n                <th>المبلغ</th>\n                <th>ملاحظات</th>\n            </tr>\n            {payments_rows}\n            <tr style=\"background-color: #f8f9fa; font-weight: bold;\">\n                <td>الإجمالي</td>\n                <td>{self.statement['total_paid']:.2f} جنيه</td>\n                <td>-</td>\n            </tr>\n        </table>\n        \n        <div class=\"summary-section\">\n            <h3>الحساب النهائي</h3>\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; text-align: center;\">\n                <div>\n                    <p style=\"margin: 0; font-size: 14px; opacity: 0.9;\">إجمالي المصروفات</p>\n                    <p style=\"font-size: 24px; font-weight: bold; margin: 5px 0;\">{self.statement['total_expenses']:.2f} جنيه</p>\n                </div>\n                <div>\n                    <p style=\"margin: 0; font-size: 14px; opacity: 0.9;\">إجمالي المدفوعات</p>\n                    <p style=\"font-size: 24px; font-weight: bold; margin: 5px 0;\">{self.statement['total_paid']:.2f} جنيه</p>\n                </div>\n                <div>\n                    <p style=\"margin: 0; font-size: 14px; opacity: 0.9;\">المتبقي</p>\n                    <p class=\"balance\">{self.statement['balance']:.2f} جنيه</p>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"footer\">\n            <p><strong>دار الحياة للطب النفسي وعلاج الإدمان</strong></p>\n            <p>نظام المحاسبة الإلكتروني</p>\n        </div>\n        \n        <button class=\"print-button no-print\" onclick=\"window.print()\">🖨️ طباعة الكشف</button>\n    </div>\n</body>\n</html>'''\n            \n            temp_dir = tempfile.gettempdir()\n            filename = os.path.join(temp_dir, f'patient_statement_{patient[1]}_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.html')\n            \n            with open(filename, 'w', encoding='utf-8') as f:\n                f.write(html_content)\n            \n            webbrowser.open('file://' + os.path.abspath(filename))\n            QMessageBox.information(self, 'نجح', 'تم فتح كشف الحساب في المتصفح')\n            \n        except Exception as e:\n            QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء إنشاء الكشف:\\n{str(e)}')\n\nclass PatientsWidget(QWidget):\n    def __init__(self, db, patient_mgr, payment_mgr, current_user=None):  # --- NEW FEATURE: User Permissions ---\n        super().__init__()\n        self.db = db\n        self.patient_mgr = patient_mgr\n        self.payment_mgr = payment_mgr\n        self.current_user = current_user  # --- NEW FEATURE: User Permissions ---\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        header = QLabel('إدارة المرضى')\n        header.setFont(QFont('Arial', 24, QFont.Weight.Bold))\n        header.setStyleSheet('color: #1abc9c; padding: 20px;')\n        layout.addWidget(header, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        search_layout = QHBoxLayout()\n        search_label = QLabel('🔍 بحث:')\n        self.search_input = QLineEdit()\n        self.search_input.setPlaceholderText('ابحث بالاسم أو الهاتف...')\n        self.search_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        self.search_input.textChanged.connect(self.search_patients)\n        search_layout.addWidget(self.search_input)\n        search_layout.addWidget(search_label)\n        layout.addLayout(search_layout)\n        \n        btn_layout = QHBoxLayout()\n        \n        add_btn = QPushButton('➕ إضافة مريض جديد')\n        add_btn.clicked.connect(self.add_patient)\n        btn_layout.addWidget(add_btn)\n        \n        refresh_btn = QPushButton('🔄 تحديث')\n        refresh_btn.clicked.connect(self.load_patients)\n        btn_layout.addWidget(refresh_btn)\n        \n        autofit_btn = QPushButton('📏 Auto-fit')\n        autofit_btn.clicked.connect(lambda: self.table.resizeColumnsToContents())\n        btn_layout.addWidget(autofit_btn)\n        \n        self.filter_combo = QComboBox()\n        self.filter_combo.addItems(['الكل', 'النشطون', 'الخريجون'])\n        self.filter_combo.currentTextChanged.connect(self.load_patients)\n        btn_layout.addWidget(self.filter_combo)\n        \n        self.sort_combo = QComboBox()\n        self.sort_combo.addItems(['أبجدي (صاعد)', 'أبجدي (تنازلي)', 'الأقدم أولاً', 'الأحدث أولاً'])\n        self.sort_combo.currentTextChanged.connect(self.load_patients)\n        btn_layout.addWidget(self.sort_combo)\n        \n        btn_layout.addStretch()\n        layout.addLayout(btn_layout)\n        \n        self.table = QTableWidget()\n        self.table.setColumnCount(12)\n        self.table.setHorizontalHeaderLabels([\n            'الرقم', 'الاسم', 'هاتف الأهل', 'تاريخ الدخول', 'القسم',\n            'التكلفة اليومية', 'السجائر', 'العدد', 'الحالة', 'المتبقي', 'كشف الحساب', 'إجراءات'\n        ])\n        self.table.setColumnWidth(0, 60)\n        self.table.setColumnWidth(1, 300)\n        self.table.setColumnWidth(2, 150)\n        self.table.setColumnWidth(3, 120)\n        self.table.setColumnWidth(4, 100)\n        self.table.setColumnWidth(5, 120)\n        self.table.setColumnWidth(6, 80)\n        self.table.setColumnWidth(7, 60)\n        self.table.setColumnWidth(8, 100)\n        self.table.setColumnWidth(9, 120)\n        self.table.setColumnWidth(10, 120)\n        self.table.setColumnWidth(11, 250)\n        self.table.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        layout.addWidget(self.table)\n        \n        self.setLayout(layout)\n        self.load_patients()\n    \n    def add_patient(self):\n        dialog = AddPatientDialog(self)\n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            if data['name']:\n                self.patient_mgr.add_patient(\n                    data['name'], data['family_phone'], data['admission_date'],\n                    data['department'], data['daily_cost'], data['receives_cigarettes'],\n                    data['cigarettes_count']\n                )\n                QMessageBox.information(self, 'نجح', 'تم إضافة المريض بنجاح')\n                self.load_patients()\n    \n    def view_patient_statement(self, patient_id):\n        statement = self.patient_mgr.get_patient_detailed_statement(patient_id)\n        if statement:\n            dialog = PatientStatementDialog(statement, self)\n            dialog.exec()\n        else:\n            QMessageBox.warning(self, 'خطأ', 'لم يتم العثور على بيانات المريض')\n    \n    def load_patients(self):\n        filter_text = self.filter_combo.currentText() if hasattr(self, 'filter_combo') else 'الكل'\n        sort_text = self.sort_combo.currentText() if hasattr(self, 'sort_combo') else 'الأحدث أولاً'\n        \n        if filter_text == 'النشطون':\n            patients = self.patient_mgr.get_all_patients('نشط')\n        elif filter_text == 'الخريجون':\n            patients = self.patient_mgr.get_all_patients('متخرج')\n        else:\n            patients = self.patient_mgr.get_all_patients()\n        \n        patients = list(patients)\n        if sort_text == 'أبجدي (صاعد)':\n            patients.sort(key=lambda x: x[1])\n        elif sort_text == 'أبجدي (تنازلي)':\n            patients.sort(key=lambda x: x[1], reverse=True)\n        elif sort_text == 'الأقدم أولاً':\n            patients.sort(key=lambda x: x[3])\n        else:\n            patients.sort(key=lambda x: x[3], reverse=True)\n        \n        self.table.setRowCount(len(patients))\n        \n        for row, patient in enumerate(patients):\n            balance = self.patient_mgr.get_patient_balance(patient[0])\n            \n            self.table.setItem(row, 0, QTableWidgetItem(str(patient[0])))\n            self.table.setItem(row, 1, QTableWidgetItem(patient[1]))\n            self.table.setItem(row, 2, QTableWidgetItem(patient[2]))\n            self.table.setItem(row, 3, QTableWidgetItem(patient[3]))\n            self.table.setItem(row, 4, QTableWidgetItem(patient[4]))\n            self.table.setItem(row, 5, QTableWidgetItem(f'{patient[5]:.2f}'))\n            self.table.setItem(row, 6, QTableWidgetItem('نعم' if patient[6] else 'لا'))\n            self.table.setItem(row, 7, QTableWidgetItem(str(patient[7])))\n            self.table.setItem(row, 8, QTableWidgetItem(patient[8]))\n            self.table.setItem(row, 9, QTableWidgetItem(f'{balance:.2f}'))\n            \n            statement_btn = QPushButton('📊 كشف الحساب')\n            statement_btn.clicked.connect(lambda checked, p_id=patient[0]: self.view_patient_statement(p_id))\n            self.table.setCellWidget(row, 10, statement_btn)\n            \n            actions_widget = QWidget()\n            actions_layout = QHBoxLayout()\n            actions_layout.setContentsMargins(2, 2, 2, 2)\n            \n            edit_btn = QPushButton('✏️')\n            edit_btn.setFixedWidth(35)\n            edit_btn.clicked.connect(lambda checked, p_id=patient[0]: self.edit_patient(p_id))\n            actions_layout.addWidget(edit_btn)\n            \n            delete_btn = QPushButton('🗑️')\n            delete_btn.setFixedWidth(35)\n            delete_btn.clicked.connect(lambda checked, p_id=patient[0]: self.delete_patient(p_id))\n            actions_layout.addWidget(delete_btn)\n            \n            if patient[8] == 'نشط':\n                discharge_btn = QPushButton('🏁')\n                discharge_btn.setFixedWidth(35)\n                discharge_btn.clicked.connect(lambda checked, p_id=patient[0]: self.discharge_patient(p_id))\n                actions_layout.addWidget(discharge_btn)\n            \n            actions_widget.setLayout(actions_layout)\n            self.table.setCellWidget(row, 11, actions_widget)\n    \n    def search_patients(self):\n        search_text = self.search_input.text().lower()\n        for row in range(self.table.rowCount()):\n            name_item = self.table.item(row, 1)\n            phone_item = self.table.item(row, 2)\n            if name_item and phone_item:\n                name = name_item.text().lower()\n                phone = phone_item.text().lower()\n                if search_text in name or search_text in phone:\n                    self.table.setRowHidden(row, False)\n                else:\n                    self.table.setRowHidden(row, True)\n    \n    def edit_patient(self, patient_id):\n        # --- FIX (فحص صلاحيات المستخدم قبل التعديل) ---\n        if self.current_user and self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', 'ليس لديك صلاحية لتعديل أو حذف البيانات')\n            return\n        \n        patient = self.patient_mgr.get_patient(patient_id)\n        if not patient:\n            return\n        \n        dialog = AddPatientDialog(self)\n        dialog.setWindowTitle('تعديل بيانات المريض')\n        dialog.name_input.setText(patient[1])\n        dialog.phone_input.setText(patient[2] if patient[2] else '')\n        dialog.date_input.setDate(QDate.fromString(patient[3], 'yyyy-MM-dd'))\n        dialog.department_input.setCurrentText(patient[4])\n        dialog.cost_input.setText(str(patient[5]))\n        dialog.cigarettes_check.setChecked(bool(patient[6]))\n        dialog.cigarettes_count.setValue(patient[7])\n        \n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            self.patient_mgr.update_patient(\n                patient_id, data['name'], data['family_phone'],\n                data['department'], data['daily_cost'],\n                data['receives_cigarettes'], data['cigarettes_count']\n            )\n            QMessageBox.information(self, 'نجح', 'تم تحديث بيانات المريض بنجاح')\n            self.load_patients()\n    \n    def delete_patient(self, patient_id):\n        # --- FIX (فحص صلاحيات المستخدم قبل الحذف) ---\n        if self.current_user and self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', 'ليس لديك صلاحية لتعديل أو حذف البيانات')\n            return\n        \n        reply = QMessageBox.question(\n            self, 'تأكيد الحذف',\n            'هل أنت متأكد من حذف السجل نهائياً؟ هذا الإجراء لا يمكن التراجع عنه.',\n            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n        )\n        if reply == QMessageBox.StandardButton.Yes:\n            try:\n                self.db.execute('DELETE FROM patients WHERE id = ?', (patient_id,))\n                QMessageBox.information(self, 'نجح', 'تم حذف المريض بنجاح')\n                self.load_patients()\n            except Exception as e:\n                QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء الحذف:\\n{str(e)}')\n    \n    def discharge_patient(self, patient_id):\n        # --- FIX (فحص صلاحيات المستخدم قبل التخريج) ---\n        if self.current_user and self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', 'ليس لديك صلاحية لتعديل أو حذف البيانات')\n            return\n        \n        reply = QMessageBox.question(\n            self, 'تأكيد التخريج',\n            'هل أنت متأكد من تخريج هذا المريض؟',\n            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n        )\n        if reply == QMessageBox.StandardButton.Yes:\n            self.patient_mgr.discharge_patient(patient_id)\n            QMessageBox.information(self, 'نجح', 'تم تخريج المريض بنجاح')\n            self.load_patients()\n","size_bytes":29395},"ui/employees_widget.py":{"content":"from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, \n                             QPushButton, QTableWidget, QTableWidgetItem, QDialog,\n                             QLineEdit, QDateEdit, QMessageBox, QHeaderView, QComboBox,\n                             QTextEdit, QFileDialog)\nfrom PyQt6.QtCore import Qt, QDate\nfrom PyQt6.QtGui import QFont\nfrom datetime import datetime\nimport os\nimport webbrowser\nimport tempfile\n\nclass AddEmployeeDialog(QDialog):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle('إضافة موظف جديد')\n        self.setFixedSize(450, 450)\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        self.name_input = QLineEdit()\n        self.name_input.setPlaceholderText('اسم الموظف')\n        self.name_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('الاسم:'))\n        layout.addWidget(self.name_input)\n        \n        self.position_input = QLineEdit()\n        self.position_input.setPlaceholderText('المنصب')\n        self.position_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('المنصب:'))\n        layout.addWidget(self.position_input)\n        \n        self.phone_input = QLineEdit()\n        self.phone_input.setPlaceholderText('رقم الهاتف')\n        self.phone_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('الهاتف:'))\n        layout.addWidget(self.phone_input)\n        \n        self.hire_date_input = QDateEdit()\n        self.hire_date_input.setDate(QDate.currentDate())\n        self.hire_date_input.setCalendarPopup(True)\n        layout.addWidget(QLabel('تاريخ التوظيف:'))\n        layout.addWidget(self.hire_date_input)\n        \n        self.salary_input = QLineEdit()\n        self.salary_input.setPlaceholderText('الراتب الأساسي')\n        self.salary_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('الراتب الأساسي:'))\n        layout.addWidget(self.salary_input)\n        \n        btn_layout = QHBoxLayout()\n        save_btn = QPushButton('حفظ')\n        save_btn.clicked.connect(self.accept)\n        cancel_btn = QPushButton('إلغاء')\n        cancel_btn.clicked.connect(self.reject)\n        btn_layout.addWidget(cancel_btn)\n        btn_layout.addWidget(save_btn)\n        \n        layout.addLayout(btn_layout)\n        self.setLayout(layout)\n    \n    def get_data(self):\n        return {\n            'name': self.name_input.text(),\n            'position': self.position_input.text(),\n            'phone': self.phone_input.text(),\n            'hire_date': self.hire_date_input.date().toString('yyyy-MM-dd'),\n            'base_salary': float(self.salary_input.text()) if self.salary_input.text() else 0\n        }\n\nclass AddTransactionDialog(QDialog):\n    def __init__(self, employees, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle('إضافة معاملة مالية للموظف')\n        self.setFixedSize(450, 450)\n        self.employees = employees\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        self.employee_combo = QComboBox()\n        for employee in self.employees:\n            self.employee_combo.addItem(f'{employee[1]} - {employee[2]}', employee[0])\n        layout.addWidget(QLabel('الموظف:'))\n        layout.addWidget(self.employee_combo)\n        \n        self.transaction_type_combo = QComboBox()\n        self.transaction_type_combo.addItems(['راتب', 'خصم', 'سلفة', 'مكافأة'])\n        layout.addWidget(QLabel('نوع المعاملة:'))\n        layout.addWidget(self.transaction_type_combo)\n        \n        self.amount_input = QLineEdit()\n        self.amount_input.setPlaceholderText('المبلغ')\n        self.amount_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('المبلغ:'))\n        layout.addWidget(self.amount_input)\n        \n        self.date_input = QDateEdit()\n        self.date_input.setDate(QDate.currentDate())\n        self.date_input.setCalendarPopup(True)\n        layout.addWidget(QLabel('التاريخ:'))\n        layout.addWidget(self.date_input)\n        \n        self.notes_input = QLineEdit()\n        self.notes_input.setPlaceholderText('ملاحظات (اختياري)')\n        self.notes_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('ملاحظات:'))\n        layout.addWidget(self.notes_input)\n        \n        btn_layout = QHBoxLayout()\n        save_btn = QPushButton('حفظ')\n        save_btn.clicked.connect(self.accept)\n        cancel_btn = QPushButton('إلغاء')\n        cancel_btn.clicked.connect(self.reject)\n        btn_layout.addWidget(cancel_btn)\n        btn_layout.addWidget(save_btn)\n        \n        layout.addLayout(btn_layout)\n        self.setLayout(layout)\n    \n    def get_data(self):\n        return {\n            'employee_id': self.employee_combo.currentData(),\n            'transaction_type': self.transaction_type_combo.currentText(),\n            'amount': float(self.amount_input.text()) if self.amount_input.text() else 0,\n            'transaction_date': self.date_input.date().toString('yyyy-MM-dd'),\n            'notes': self.notes_input.text()\n        }\n\nclass EmployeeDetailsDialog(QDialog):\n    def __init__(self, employee, transactions, balance, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(f'تفاصيل الموظف - {employee[1]}')\n        self.setMinimumSize(700, 500)\n        self.employee = employee\n        self.transactions = transactions\n        self.balance = balance\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        info_label = QLabel(f'''\n        <div style=\"text-align: right; direction: rtl;\">\n        <h2>{self.employee[1]}</h2>\n        <p><b>المنصب:</b> {self.employee[2] if self.employee[2] else 'غير محدد'}</p>\n        <p><b>الهاتف:</b> {self.employee[3] if self.employee[3] else 'غير محدد'}</p>\n        <p><b>تاريخ التوظيف:</b> {self.employee[4]}</p>\n        <p><b>الراتب الأساسي:</b> {self.employee[5]:.2f} جنيه</p>\n        </div>\n        ''')\n        info_label.setTextFormat(Qt.TextFormat.RichText)\n        layout.addWidget(info_label)\n        \n        balance_label = QLabel(f'''\n        <div style=\"text-align: right; direction: rtl; background-color: #34495e; padding: 10px; border-radius: 5px;\">\n        <h3>الملخص المالي</h3>\n        <p><b>إجمالي الرواتب المدفوعة:</b> {self.balance['salary_paid']:.2f} جنيه</p>\n        <p><b>المكافآت:</b> {self.balance['bonuses']:.2f} جنيه</p>\n        <p><b>الخصومات:</b> {self.balance['deductions']:.2f} جنيه</p>\n        <p><b>السلف:</b> {self.balance['advances']:.2f} جنيه</p>\n        <p style=\"color: #1abc9c;\"><b>الصافي:</b> {self.balance['total']:.2f} جنيه</p>\n        </div>\n        ''')\n        balance_label.setTextFormat(Qt.TextFormat.RichText)\n        layout.addWidget(balance_label)\n        \n        trans_label = QLabel('المعاملات المالية:')\n        trans_label.setFont(QFont('Arial', 14, QFont.Weight.Bold))\n        layout.addWidget(trans_label, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        self.trans_table = QTableWidget()\n        self.trans_table.setColumnCount(5)\n        self.trans_table.setHorizontalHeaderLabels([\n            'الرقم', 'النوع', 'المبلغ', 'التاريخ', 'ملاحظات'\n        ])\n        self.trans_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.trans_table.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        self.trans_table.setRowCount(len(self.transactions))\n        \n        for row, trans in enumerate(self.transactions):\n            self.trans_table.setItem(row, 0, QTableWidgetItem(str(trans[0])))\n            self.trans_table.setItem(row, 1, QTableWidgetItem(trans[2]))\n            self.trans_table.setItem(row, 2, QTableWidgetItem(f'{trans[3]:.2f}'))\n            self.trans_table.setItem(row, 3, QTableWidgetItem(trans[4]))\n            self.trans_table.setItem(row, 4, QTableWidgetItem(trans[5] if trans[5] else ''))\n        \n        layout.addWidget(self.trans_table)\n        \n        btn_layout = QHBoxLayout()\n        \n        print_btn = QPushButton('🖨️ طباعة / حفظ PDF')\n        print_btn.clicked.connect(self.print_statement)\n        btn_layout.addWidget(print_btn)\n        \n        close_btn = QPushButton('إغلاق')\n        close_btn.clicked.connect(self.close)\n        btn_layout.addWidget(close_btn)\n        \n        layout.addLayout(btn_layout)\n        self.setLayout(layout)\n    \n    def print_statement(self):\n        try:\n            transactions_rows = ''\n            for trans in self.transactions:\n                notes = trans[5] if trans[5] else '-'\n                transactions_rows += f'''\n                <tr>\n                    <td>{trans[0]}</td>\n                    <td>{trans[2]}</td>\n                    <td>{trans[3]:.2f} جنيه</td>\n                    <td>{trans[4]}</td>\n                    <td>{notes}</td>\n                </tr>\n                '''\n            \n            html_content = f'''<!DOCTYPE html>\n<html dir=\"rtl\" lang=\"ar\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>كشف حساب الموظف - {self.employee[1]}</title>\n    <style>\n        @media print {{\n            body {{\n                margin: 0;\n                padding: 20px;\n            }}\n            .no-print {{\n                display: none;\n            }}\n        }}\n        \n        body {{\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            direction: rtl;\n            text-align: right;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            padding: 20px;\n            margin: 0;\n        }}\n        \n        .container {{\n            max-width: 1000px;\n            margin: 0 auto;\n            background: white;\n            padding: 40px;\n            border-radius: 10px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }}\n        \n        .header {{\n            text-align: center;\n            border-bottom: 3px solid #667eea;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n        }}\n        \n        .header h1 {{\n            color: #667eea;\n            margin: 0;\n            font-size: 32px;\n            font-weight: bold;\n        }}\n        \n        .header h2 {{\n            color: #764ba2;\n            margin: 10px 0 0 0;\n            font-size: 24px;\n        }}\n        \n        .info-section {{\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 10px;\n            margin: 20px 0;\n        }}\n        \n        .info-section h3 {{\n            color: #667eea;\n            margin-top: 0;\n        }}\n        \n        .info-section p {{\n            margin: 8px 0;\n            font-size: 15px;\n        }}\n        \n        .stats-grid {{\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n            margin: 30px 0;\n        }}\n        \n        .stat-card {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 20px;\n            border-radius: 10px;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n            text-align: center;\n        }}\n        \n        .stat-card.success {{\n            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\n        }}\n        \n        .stat-card.warning {{\n            background: linear-gradient(135deg, #f2994a 0%, #f2c94c 100%);\n        }}\n        \n        .stat-card.danger {{\n            background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%);\n        }}\n        \n        .stat-card h3 {{\n            margin: 0 0 10px 0;\n            font-size: 14px;\n            opacity: 0.9;\n        }}\n        \n        .stat-card .value {{\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n        }}\n        \n        .details-table {{\n            width: 100%;\n            border-collapse: collapse;\n            margin: 30px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }}\n        \n        .details-table th {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 12px;\n            text-align: center;\n            font-weight: bold;\n        }}\n        \n        .details-table td {{\n            padding: 10px 12px;\n            border-bottom: 1px solid #ddd;\n            text-align: center;\n        }}\n        \n        .details-table tr:hover {{\n            background-color: #f5f5f5;\n        }}\n        \n        .footer {{\n            text-align: center;\n            margin-top: 40px;\n            padding-top: 20px;\n            border-top: 2px solid #eee;\n            color: #666;\n            font-size: 14px;\n        }}\n        \n        .print-button {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border: none;\n            padding: 15px 30px;\n            font-size: 16px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 20px auto;\n            display: block;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }}\n        \n        .print-button:hover {{\n            transform: translateY(-2px);\n            box-shadow: 0 6px 8px rgba(0,0,0,0.3);\n        }}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🏥 دار الحياة للطب النفسي وعلاج الإدمان</h1>\n            <h2>👔 كشف حساب الموظف</h2>\n            <div class=\"date\">تاريخ الطباعة: {datetime.now().strftime('%Y-%m-%d %H:%M')}</div>\n        </div>\n        \n        <div class=\"info-section\">\n            <h3>معلومات الموظف</h3>\n            <p><strong>الاسم:</strong> {self.employee[1]}</p>\n            <p><strong>المنصب:</strong> {self.employee[2] if self.employee[2] else 'غير محدد'}</p>\n            <p><strong>الهاتف:</strong> {self.employee[3] if self.employee[3] else 'غير محدد'}</p>\n            <p><strong>تاريخ التوظيف:</strong> {self.employee[4]}</p>\n            <p><strong>الراتب الأساسي:</strong> {self.employee[5]:.2f} جنيه</p>\n        </div>\n        \n        <h3 style=\"color: #667eea; margin-top: 30px;\">💰 الملخص المالي</h3>\n        <div class=\"stats-grid\">\n            <div class=\"stat-card success\">\n                <h3>الرواتب المدفوعة</h3>\n                <div class=\"value\">{self.balance[\"salary_paid\"]:.2f}</div>\n                <p style=\"margin-top: 5px; font-size: 12px;\">جنيه</p>\n            </div>\n            <div class=\"stat-card success\">\n                <h3>المكافآت</h3>\n                <div class=\"value\">{self.balance[\"bonuses\"]:.2f}</div>\n                <p style=\"margin-top: 5px; font-size: 12px;\">جنيه</p>\n            </div>\n            <div class=\"stat-card danger\">\n                <h3>الخصومات</h3>\n                <div class=\"value\">{self.balance[\"deductions\"]:.2f}</div>\n                <p style=\"margin-top: 5px; font-size: 12px;\">جنيه</p>\n            </div>\n            <div class=\"stat-card warning\">\n                <h3>السلف</h3>\n                <div class=\"value\">{self.balance[\"advances\"]:.2f}</div>\n                <p style=\"margin-top: 5px; font-size: 12px;\">جنيه</p>\n            </div>\n            <div class=\"stat-card\">\n                <h3>الصافي</h3>\n                <div class=\"value\">{self.balance[\"total\"]:.2f}</div>\n                <p style=\"margin-top: 5px; font-size: 12px;\">جنيه</p>\n            </div>\n        </div>\n        \n        <h3 style=\"color: #667eea; margin-top: 40px;\">📋 المعاملات المالية</h3>\n        <table class=\"details-table\">\n            <tr>\n                <th>الرقم</th>\n                <th>نوع المعاملة</th>\n                <th>المبلغ</th>\n                <th>التاريخ</th>\n                <th>ملاحظات</th>\n            </tr>\n            {transactions_rows}\n        </table>\n        \n        <div class=\"footer\">\n            <p><strong>دار الحياة للطب النفسي وعلاج الإدمان</strong></p>\n            <p>نظام المحاسبة الإلكتروني</p>\n        </div>\n        \n        <button class=\"print-button no-print\" onclick=\"window.print()\">🖨️ طباعة الكشف</button>\n    </div>\n</body>\n</html>'''\n            \n            temp_dir = tempfile.gettempdir()\n            filename = os.path.join(temp_dir, f'employee_statement_{self.employee[1]}_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.html')\n            \n            with open(filename, 'w', encoding='utf-8') as f:\n                f.write(html_content)\n            \n            webbrowser.open('file://' + os.path.abspath(filename))\n            QMessageBox.information(self, 'نجح', 'تم فتح كشف الحساب في المتصفح')\n            \n        except Exception as e:\n            QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء إنشاء الكشف:\\n{str(e)}')\n\nclass EmployeesWidget(QWidget):\n    def __init__(self, db, employee_mgr, current_user=None):  # --- NEW FEATURE: User Permissions ---\n        super().__init__()\n        self.db = db\n        self.employee_mgr = employee_mgr\n        self.current_user = current_user  # --- NEW FEATURE: User Permissions ---\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        header = QLabel('إدارة الموظفين')\n        header.setFont(QFont('Arial', 24, QFont.Weight.Bold))\n        header.setStyleSheet('color: #1abc9c; padding: 20px;')\n        layout.addWidget(header, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        btn_layout = QHBoxLayout()\n        \n        add_btn = QPushButton('➕ إضافة موظف جديد')\n        add_btn.clicked.connect(self.add_employee)\n        btn_layout.addWidget(add_btn)\n        \n        add_trans_btn = QPushButton('💰 إضافة معاملة مالية')\n        add_trans_btn.clicked.connect(self.add_transaction)\n        btn_layout.addWidget(add_trans_btn)\n        \n        refresh_btn = QPushButton('🔄 تحديث')\n        refresh_btn.clicked.connect(self.load_employees)\n        btn_layout.addWidget(refresh_btn)\n        \n        btn_layout.addStretch()\n        layout.addLayout(btn_layout)\n        \n        self.table = QTableWidget()\n        self.table.setColumnCount(8)\n        self.table.setHorizontalHeaderLabels([\n            'الرقم', 'الاسم', 'المنصب', 'الهاتف', 'تاريخ التوظيف', 'الراتب', 'التفاصيل', 'إجراءات'\n        ])\n        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.table.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        layout.addWidget(self.table)\n        \n        self.setLayout(layout)\n        self.load_employees()\n    \n    def add_employee(self):\n        dialog = AddEmployeeDialog(self)\n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            if data['name'] and data['base_salary'] > 0:\n                self.employee_mgr.add_employee(\n                    data['name'], data['position'], data['phone'],\n                    data['hire_date'], data['base_salary']\n                )\n                QMessageBox.information(self, 'نجح', 'تم إضافة الموظف بنجاح')\n                self.load_employees()\n    \n    def add_transaction(self):\n        employees = self.employee_mgr.get_all_employees('نشط')\n        if not employees:\n            QMessageBox.warning(self, 'تنبيه', 'لا يوجد موظفون نشطون')\n            return\n        \n        dialog = AddTransactionDialog(employees, self)\n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            if data['amount'] > 0:\n                self.employee_mgr.add_transaction(\n                    data['employee_id'], data['transaction_type'],\n                    data['amount'], data['transaction_date'], data['notes']\n                )\n                QMessageBox.information(self, 'نجح', 'تم إضافة المعاملة بنجاح')\n                self.load_employees()\n    \n    def view_employee_details(self, employee_id):\n        employee = self.employee_mgr.get_employee(employee_id)\n        transactions = self.employee_mgr.get_employee_transactions(employee_id)\n        balance = self.employee_mgr.calculate_employee_balance(employee_id)\n        \n        dialog = EmployeeDetailsDialog(employee, transactions, balance, self)\n        dialog.exec()\n    \n    def load_employees(self):\n        employees = self.employee_mgr.get_all_employees()\n        self.table.setRowCount(len(employees))\n        \n        for row, employee in enumerate(employees):\n            self.table.setItem(row, 0, QTableWidgetItem(str(employee[0])))\n            self.table.setItem(row, 1, QTableWidgetItem(employee[1]))\n            self.table.setItem(row, 2, QTableWidgetItem(employee[2] if employee[2] else ''))\n            self.table.setItem(row, 3, QTableWidgetItem(employee[3] if employee[3] else ''))\n            self.table.setItem(row, 4, QTableWidgetItem(employee[4]))\n            self.table.setItem(row, 5, QTableWidgetItem(f'{employee[5]:.2f}'))\n            \n            details_btn = QPushButton('📊')\n            details_btn.setFixedWidth(40)\n            details_btn.clicked.connect(lambda checked, emp_id=employee[0]: self.view_employee_details(emp_id))\n            self.table.setCellWidget(row, 6, details_btn)\n            \n            if self.current_user and self.current_user.get('role') == 'admin':\n                actions_widget = QWidget()\n                actions_layout = QHBoxLayout()\n                actions_layout.setContentsMargins(0, 0, 0, 0)\n                \n                edit_btn = QPushButton('✏️')\n                edit_btn.setFixedWidth(40)\n                edit_btn.clicked.connect(lambda checked, eid=employee[0]: self.edit_employee(eid))\n                actions_layout.addWidget(edit_btn)\n                \n                delete_btn = QPushButton('🗑️')\n                delete_btn.setFixedWidth(40)\n                delete_btn.setStyleSheet('background-color: #e74c3c; color: white;')\n                delete_btn.clicked.connect(lambda checked, eid=employee[0]: self.delete_employee(eid))\n                actions_layout.addWidget(delete_btn)\n                \n                actions_widget.setLayout(actions_layout)\n                self.table.setCellWidget(row, 7, actions_widget)\n            else:\n                no_access_label = QLabel('🔒')\n                no_access_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n                self.table.setCellWidget(row, 7, no_access_label)\n    \n    def edit_employee(self, employee_id):\n        if not self.current_user or self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', '⚠️ غير مصرح لك بتعديل البيانات')\n            return\n        \n        employee = self.employee_mgr.get_employee(employee_id)\n        if not employee:\n            QMessageBox.warning(self, 'خطأ', 'لم يتم العثور على الموظف')\n            return\n        \n        dialog = AddEmployeeDialog(self)\n        dialog.setWindowTitle('تعديل موظف')\n        dialog.name_input.setText(employee[1])\n        dialog.position_input.setText(employee[2] if employee[2] else '')\n        dialog.phone_input.setText(employee[3] if employee[3] else '')\n        dialog.hire_date_input.setDate(QDate.fromString(employee[4], 'yyyy-MM-dd'))\n        dialog.salary_input.setText(str(employee[5]))\n        \n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            if data['name'] and data['base_salary'] > 0:\n                self.employee_mgr.update_employee(\n                    employee_id, data['name'], data['position'],\n                    data['phone'], data['base_salary']\n                )\n                QMessageBox.information(self, 'نجح', 'تم تعديل الموظف بنجاح')\n                self.load_employees()\n    \n    def delete_employee(self, employee_id):\n        if not self.current_user or self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', '⚠️ غير مصرح لك بحذف البيانات')\n            return\n        \n        reply = QMessageBox.question(\n            self, 'تأكيد الحذف',\n            'هل أنت متأكد من حذف هذا الموظف؟\\nسيتم حذف جميع معاملاته المالية أيضاً.\\nلا يمكن التراجع عن هذا الإجراء.',\n            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n        )\n        \n        if reply == QMessageBox.StandardButton.Yes:\n            self.employee_mgr.delete_employee(employee_id)\n            QMessageBox.information(self, 'نجح', 'تم حذف الموظف بنجاح')\n            self.load_employees()\n","size_bytes":25540},"db/database.py":{"content":"import sqlite3\nfrom datetime import datetime\nimport os\n\nclass Database:\n    def __init__(self, db_path='db/dar_alhayat.db'):\n        self.db_path = db_path\n        os.makedirs(os.path.dirname(db_path), exist_ok=True)\n        self.conn = None\n        self.cursor = None\n        self.connect()\n        self.create_tables()\n    \n    def connect(self):\n        self.conn = sqlite3.connect(self.db_path)\n        self.cursor = self.conn.cursor()\n    \n    def create_tables(self):\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS patients (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT NOT NULL,\n                family_phone TEXT,\n                admission_date TEXT NOT NULL,\n                department TEXT NOT NULL,\n                daily_cost REAL NOT NULL,\n                receives_cigarettes INTEGER DEFAULT 0,\n                cigarettes_count INTEGER DEFAULT 0,\n                status TEXT DEFAULT 'نشط',\n                created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n                discharged_at TEXT\n            )\n        ''')\n        \n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS payments (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                patient_id INTEGER NOT NULL,\n                amount REAL NOT NULL,\n                payment_date TEXT NOT NULL,\n                notes TEXT,\n                created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (patient_id) REFERENCES patients(id)\n            )\n        ''')\n        \n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS expenses (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                category TEXT NOT NULL,\n                amount REAL NOT NULL,\n                expense_date TEXT NOT NULL,\n                description TEXT,\n                created_at TEXT DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n        \n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS employees (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT NOT NULL,\n                position TEXT,\n                phone TEXT,\n                hire_date TEXT NOT NULL,\n                base_salary REAL NOT NULL,\n                status TEXT DEFAULT 'نشط',\n                created_at TEXT DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n        \n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS employee_transactions (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                employee_id INTEGER NOT NULL,\n                transaction_type TEXT NOT NULL,\n                amount REAL NOT NULL,\n                transaction_date TEXT NOT NULL,\n                notes TEXT,\n                created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (employee_id) REFERENCES employees(id)\n            )\n        ''')\n        \n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password TEXT NOT NULL,\n                full_name TEXT,\n                role TEXT DEFAULT 'user',\n                created_at TEXT DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n        \n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS settings (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                setting_key TEXT UNIQUE NOT NULL,\n                setting_value TEXT NOT NULL,\n                created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n                updated_at TEXT DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n        \n        # --- NEW (إنشاء جدول audit_log لتسجيل العمليات المهمة) ---\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS audit_log (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                user_id INTEGER,\n                username TEXT,\n                action_type TEXT NOT NULL,\n                action_description TEXT,\n                old_value TEXT,\n                new_value TEXT,\n                affected_count INTEGER,\n                created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES users(id)\n            )\n        ''')\n        \n        self.cursor.execute('''\n            SELECT COUNT(*) FROM users WHERE username = 'admin'\n        ''')\n        if self.cursor.fetchone()[0] == 0:\n            self.cursor.execute('''\n                INSERT INTO users (username, password, full_name, role)\n                VALUES ('admin', 'admin123', 'مدير النظام', 'admin')\n            ''')\n        \n        self.cursor.execute('''\n            SELECT COUNT(*) FROM settings WHERE setting_key = 'cigarette_pack_price'\n        ''')\n        if self.cursor.fetchone()[0] == 0:\n            self.cursor.execute('''\n                INSERT INTO settings (setting_key, setting_value)\n                VALUES ('cigarette_pack_price', '40')\n            ''')\n        \n        self.cursor.execute('''\n            SELECT COUNT(*) FROM settings WHERE setting_key = 'cigarette_box_cost'\n        ''')\n        if self.cursor.fetchone()[0] == 0:\n            self.cursor.execute('''\n                INSERT INTO settings (setting_key, setting_value)\n                VALUES ('cigarette_box_cost', '40')\n            ''')\n        \n        self.cursor.execute('''\n            SELECT COUNT(*) FROM settings WHERE setting_key = 'cigarettes_per_box'\n        ''')\n        if self.cursor.fetchone()[0] == 0:\n            self.cursor.execute('''\n                INSERT INTO settings (setting_key, setting_value)\n                VALUES ('cigarettes_per_box', '20')\n            ''')\n        \n        self.conn.commit()\n    \n    def execute(self, query, params=()):\n        self.cursor.execute(query, params)\n        self.conn.commit()\n        return self.cursor\n    \n    def fetchall(self, query, params=()):\n        self.cursor.execute(query, params)\n        return self.cursor.fetchall()\n    \n    def fetchone(self, query, params=()):\n        self.cursor.execute(query, params)\n        return self.cursor.fetchone()\n    \n    def close(self):\n        if self.conn:\n            self.conn.close()\n","size_bytes":6244},"ui/expenses_widget.py":{"content":"from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, \n                             QPushButton, QTableWidget, QTableWidgetItem, QDialog,\n                             QLineEdit, QDateEdit, QMessageBox, QHeaderView)\nfrom PyQt6.QtCore import Qt, QDate\nfrom PyQt6.QtGui import QFont\n\nclass AddExpenseDialog(QDialog):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle('إضافة مصروف جديد')\n        self.setFixedSize(450, 350)\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        self.category_input = QLineEdit()\n        self.category_input.setPlaceholderText('بند المصروف')\n        self.category_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('البند:'))\n        layout.addWidget(self.category_input)\n        \n        self.amount_input = QLineEdit()\n        self.amount_input.setPlaceholderText('المبلغ')\n        self.amount_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('المبلغ:'))\n        layout.addWidget(self.amount_input)\n        \n        self.date_input = QDateEdit()\n        self.date_input.setDate(QDate.currentDate())\n        self.date_input.setCalendarPopup(True)\n        layout.addWidget(QLabel('التاريخ:'))\n        layout.addWidget(self.date_input)\n        \n        self.description_input = QLineEdit()\n        self.description_input.setPlaceholderText('وصف (اختياري)')\n        self.description_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('الوصف:'))\n        layout.addWidget(self.description_input)\n        \n        btn_layout = QHBoxLayout()\n        save_btn = QPushButton('حفظ')\n        save_btn.clicked.connect(self.accept)\n        cancel_btn = QPushButton('إلغاء')\n        cancel_btn.clicked.connect(self.reject)\n        btn_layout.addWidget(cancel_btn)\n        btn_layout.addWidget(save_btn)\n        \n        layout.addLayout(btn_layout)\n        self.setLayout(layout)\n    \n    def get_data(self):\n        return {\n            'category': self.category_input.text(),\n            'amount': float(self.amount_input.text()) if self.amount_input.text() else 0,\n            'expense_date': self.date_input.date().toString('yyyy-MM-dd'),\n            'description': self.description_input.text()\n        }\n\nclass ExpensesWidget(QWidget):\n    def __init__(self, db, expense_mgr, current_user=None):  # --- NEW FEATURE: User Permissions ---\n        super().__init__()\n        self.db = db\n        self.expense_mgr = expense_mgr\n        self.current_user = current_user  # --- NEW FEATURE: User Permissions ---\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        header = QLabel('إدارة المصروفات')\n        header.setFont(QFont('Arial', 24, QFont.Weight.Bold))\n        header.setStyleSheet('color: #1abc9c; padding: 20px;')\n        layout.addWidget(header, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        btn_layout = QHBoxLayout()\n        \n        add_btn = QPushButton('➕ إضافة مصروف جديد')\n        add_btn.clicked.connect(self.add_expense)\n        btn_layout.addWidget(add_btn)\n        \n        refresh_btn = QPushButton('🔄 تحديث')\n        refresh_btn.clicked.connect(self.load_expenses)\n        btn_layout.addWidget(refresh_btn)\n        \n        btn_layout.addStretch()\n        layout.addLayout(btn_layout)\n        \n        self.table = QTableWidget()\n        self.table.setColumnCount(6)\n        self.table.setHorizontalHeaderLabels([\n            'الرقم', 'البند', 'المبلغ', 'التاريخ', 'الوصف', 'إجراءات'\n        ])\n        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.table.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        layout.addWidget(self.table)\n        \n        self.setLayout(layout)\n        self.load_expenses()\n    \n    def add_expense(self):\n        dialog = AddExpenseDialog(self)\n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            if data['category'] and data['amount'] > 0:\n                self.expense_mgr.add_expense(\n                    data['category'], data['amount'],\n                    data['expense_date'], data['description']\n                )\n                QMessageBox.information(self, 'نجح', 'تم إضافة المصروف بنجاح')\n                self.load_expenses()\n    \n    def load_expenses(self):\n        expenses = self.expense_mgr.get_all_expenses()\n        self.table.setRowCount(len(expenses))\n        \n        for row, expense in enumerate(expenses):\n            self.table.setItem(row, 0, QTableWidgetItem(str(expense[0])))\n            self.table.setItem(row, 1, QTableWidgetItem(expense[1]))\n            self.table.setItem(row, 2, QTableWidgetItem(f'{expense[2]:.2f}'))\n            self.table.setItem(row, 3, QTableWidgetItem(expense[3]))\n            self.table.setItem(row, 4, QTableWidgetItem(expense[4] if expense[4] else ''))\n            \n            if self.current_user and self.current_user.get('role') == 'admin':\n                actions_widget = QWidget()\n                actions_layout = QHBoxLayout()\n                actions_layout.setContentsMargins(0, 0, 0, 0)\n                \n                edit_btn = QPushButton('✏️')\n                edit_btn.setFixedWidth(40)\n                edit_btn.clicked.connect(lambda checked, eid=expense[0]: self.edit_expense(eid))\n                actions_layout.addWidget(edit_btn)\n                \n                delete_btn = QPushButton('🗑️')\n                delete_btn.setFixedWidth(40)\n                delete_btn.setStyleSheet('background-color: #e74c3c; color: white;')\n                delete_btn.clicked.connect(lambda checked, eid=expense[0]: self.delete_expense(eid))\n                actions_layout.addWidget(delete_btn)\n                \n                actions_widget.setLayout(actions_layout)\n                self.table.setCellWidget(row, 5, actions_widget)\n            else:\n                no_access_label = QLabel('🔒')\n                no_access_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n                self.table.setCellWidget(row, 5, no_access_label)\n    \n    def edit_expense(self, expense_id):\n        if not self.current_user or self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', '⚠️ غير مصرح لك بتعديل البيانات')\n            return\n        \n        expense = self.expense_mgr.get_expense(expense_id)\n        if not expense:\n            QMessageBox.warning(self, 'خطأ', 'لم يتم العثور على المصروف')\n            return\n        \n        dialog = AddExpenseDialog(self)\n        dialog.setWindowTitle('تعديل مصروف')\n        dialog.category_input.setText(expense[1])\n        dialog.amount_input.setText(str(expense[2]))\n        dialog.date_input.setDate(QDate.fromString(expense[3], 'yyyy-MM-dd'))\n        dialog.description_input.setText(expense[4] if expense[4] else '')\n        \n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            if data['category'] and data['amount'] > 0:\n                self.expense_mgr.update_expense(\n                    expense_id, data['category'], data['amount'],\n                    data['expense_date'], data['description']\n                )\n                QMessageBox.information(self, 'نجح', 'تم تعديل المصروف بنجاح')\n                self.load_expenses()\n    \n    def delete_expense(self, expense_id):\n        if not self.current_user or self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', '⚠️ غير مصرح لك بحذف البيانات')\n            return\n        \n        reply = QMessageBox.question(\n            self, 'تأكيد الحذف',\n            'هل أنت متأكد من حذف هذا المصروف؟\\nلا يمكن التراجع عن هذا الإجراء.',\n            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n        )\n        \n        if reply == QMessageBox.StandardButton.Yes:\n            self.expense_mgr.delete_expense(expense_id)\n            QMessageBox.information(self, 'نجح', 'تم حذف المصروف بنجاح')\n            self.load_expenses()\n","size_bytes":8440},"modules/__init__.py":{"content":"# Modules Package\n","size_bytes":18},"ui/dashboard.py":{"content":"from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, \n                             QFrame, QGridLayout, QPushButton)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom matplotlib.figure import Figure\n\nclass StatCard(QFrame):\n    def __init__(self, title, value, icon=''):\n        super().__init__()\n        self.setStyleSheet('''\n            QFrame {\n                background-color: #34495e;\n                border-radius: 10px;\n                padding: 15px;\n            }\n        ''')\n        \n        layout = QVBoxLayout()\n        \n        title_label = QLabel(f'{icon} {title}')\n        title_label.setFont(QFont('Arial', 12))\n        title_label.setStyleSheet('color: #95a5a6;')\n        layout.addWidget(title_label, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        self.value_label = QLabel(str(value))\n        self.value_label.setFont(QFont('Arial', 28, QFont.Weight.Bold))\n        self.value_label.setStyleSheet('color: #1abc9c;')\n        layout.addWidget(self.value_label, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        self.setLayout(layout)\n    \n    def update_value(self, value):\n        self.value_label.setText(str(value))\n\nclass DashboardWidget(QWidget):\n    def __init__(self, db, patient_mgr, payment_mgr, expense_mgr, employee_mgr):\n        super().__init__()\n        self.db = db\n        self.patient_mgr = patient_mgr\n        self.payment_mgr = payment_mgr\n        self.expense_mgr = expense_mgr\n        self.employee_mgr = employee_mgr\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        header = QLabel('لوحة التحكم الرئيسية')\n        header.setFont(QFont('Arial', 24, QFont.Weight.Bold))\n        header.setStyleSheet('color: #1abc9c; padding: 20px;')\n        layout.addWidget(header, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        stats_layout = QGridLayout()\n        stats_layout.setSpacing(15)\n        \n        self.active_patients_card = StatCard('المرضى النشطون', '0', '👥')\n        self.graduated_card = StatCard('الخريجون', '0', '🎓')\n        self.revenue_card = StatCard('إجمالي الإيرادات', '0 جنيه', '💰')\n        self.expenses_card = StatCard('إجمالي المصروفات', '0 جنيه', '📊')\n        self.profit_card = StatCard('صافي الربح', '0 جنيه', '📈')\n        self.employees_card = StatCard('عدد الموظفين', '0', '👔')\n        self.cigarettes_card = StatCard('السجائر اليومية', '0', '🚬')\n        \n        stats_layout.addWidget(self.active_patients_card, 0, 0)\n        stats_layout.addWidget(self.graduated_card, 0, 1)\n        stats_layout.addWidget(self.revenue_card, 0, 2)\n        stats_layout.addWidget(self.expenses_card, 1, 0)\n        stats_layout.addWidget(self.profit_card, 1, 1)\n        stats_layout.addWidget(self.employees_card, 1, 2)\n        stats_layout.addWidget(self.cigarettes_card, 2, 0)\n        \n        layout.addLayout(stats_layout)\n        \n        btn_layout = QHBoxLayout()\n        \n        refresh_btn = QPushButton('🔄 تحديث البيانات')\n        refresh_btn.setFixedHeight(40)\n        refresh_btn.clicked.connect(self.refresh_data)\n        btn_layout.addWidget(refresh_btn)\n        \n        btn_layout.addStretch()\n        layout.addLayout(btn_layout)\n        \n        layout.addStretch()\n        \n        self.setLayout(layout)\n        self.refresh_data()\n    \n    def refresh_data(self):\n        active = self.patient_mgr.get_active_count()\n        graduated = self.patient_mgr.get_graduated_count()\n        revenue = self.payment_mgr.get_total_revenue()\n        expenses = self.expense_mgr.get_total_expenses()\n        profit = revenue - expenses\n        employees = self.employee_mgr.get_active_count()\n        cigarettes = self.patient_mgr.get_total_cigarettes()\n        \n        self.active_patients_card.update_value(str(active))\n        self.graduated_card.update_value(str(graduated))\n        self.revenue_card.update_value(f'{revenue:.2f} جنيه')\n        self.expenses_card.update_value(f'{expenses:.2f} جنيه')\n        self.profit_card.update_value(f'{profit:.2f} جنيه')\n        self.employees_card.update_value(str(employees))\n        self.cigarettes_card.update_value(str(cigarettes))\n","size_bytes":4450},"ui/payments_widget.py":{"content":"from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, \n                             QPushButton, QTableWidget, QTableWidgetItem, QDialog,\n                             QLineEdit, QComboBox, QDateEdit, QMessageBox, QHeaderView)\nfrom PyQt6.QtCore import Qt, QDate\nfrom PyQt6.QtGui import QFont\n\nclass AddPaymentDialog(QDialog):\n    def __init__(self, patients, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle('إضافة دفعة جديدة')\n        self.setFixedSize(450, 350)\n        self.patients = patients\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        self.patient_combo = QComboBox()\n        for patient in self.patients:\n            self.patient_combo.addItem(f'{patient[1]} - رقم {patient[0]}', patient[0])\n        layout.addWidget(QLabel('المريض:'))\n        layout.addWidget(self.patient_combo)\n        \n        self.amount_input = QLineEdit()\n        self.amount_input.setPlaceholderText('المبلغ')\n        self.amount_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('المبلغ:'))\n        layout.addWidget(self.amount_input)\n        \n        self.date_input = QDateEdit()\n        self.date_input.setDate(QDate.currentDate())\n        self.date_input.setCalendarPopup(True)\n        layout.addWidget(QLabel('تاريخ الدفعة:'))\n        layout.addWidget(self.date_input)\n        \n        self.notes_input = QLineEdit()\n        self.notes_input.setPlaceholderText('ملاحظات (اختياري)')\n        self.notes_input.setAlignment(Qt.AlignmentFlag.AlignRight)\n        layout.addWidget(QLabel('ملاحظات:'))\n        layout.addWidget(self.notes_input)\n        \n        btn_layout = QHBoxLayout()\n        save_btn = QPushButton('حفظ')\n        save_btn.clicked.connect(self.accept)\n        cancel_btn = QPushButton('إلغاء')\n        cancel_btn.clicked.connect(self.reject)\n        btn_layout.addWidget(cancel_btn)\n        btn_layout.addWidget(save_btn)\n        \n        layout.addLayout(btn_layout)\n        self.setLayout(layout)\n    \n    def get_data(self):\n        return {\n            'patient_id': self.patient_combo.currentData(),\n            'amount': float(self.amount_input.text()) if self.amount_input.text() else 0,\n            'payment_date': self.date_input.date().toString('yyyy-MM-dd'),\n            'notes': self.notes_input.text()\n        }\n\nclass PaymentsWidget(QWidget):\n    def __init__(self, db, payment_mgr, patient_mgr, current_user=None):  # --- NEW FEATURE: User Permissions ---\n        super().__init__()\n        self.db = db\n        self.payment_mgr = payment_mgr\n        self.patient_mgr = patient_mgr\n        self.current_user = current_user  # --- NEW FEATURE: User Permissions ---\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        header = QLabel('إدارة المدفوعات')\n        header.setFont(QFont('Arial', 24, QFont.Weight.Bold))\n        header.setStyleSheet('color: #1abc9c; padding: 20px;')\n        layout.addWidget(header, alignment=Qt.AlignmentFlag.AlignRight)\n        \n        btn_layout = QHBoxLayout()\n        \n        add_btn = QPushButton('➕ إضافة دفعة جديدة')\n        add_btn.clicked.connect(self.add_payment)\n        btn_layout.addWidget(add_btn)\n        \n        refresh_btn = QPushButton('🔄 تحديث')\n        refresh_btn.clicked.connect(self.load_payments)\n        btn_layout.addWidget(refresh_btn)\n        \n        btn_layout.addStretch()\n        layout.addLayout(btn_layout)\n        \n        self.table = QTableWidget()\n        self.table.setColumnCount(6)\n        self.table.setHorizontalHeaderLabels([\n            'الرقم', 'اسم المريض', 'المبلغ', 'التاريخ', 'ملاحظات', 'إجراءات'\n        ])\n        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.table.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        layout.addWidget(self.table)\n        \n        self.setLayout(layout)\n        self.load_payments()\n    \n    def add_payment(self):\n        patients = self.patient_mgr.get_all_patients('نشط')\n        if not patients:\n            QMessageBox.warning(self, 'تنبيه', 'لا يوجد مرضى نشطون')\n            return\n        \n        dialog = AddPaymentDialog(patients, self)\n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            if data['amount'] > 0:\n                self.payment_mgr.add_payment(\n                    data['patient_id'], data['amount'],\n                    data['payment_date'], data['notes']\n                )\n                QMessageBox.information(self, 'نجح', 'تم إضافة الدفعة بنجاح')\n                self.load_payments()\n    \n    def load_payments(self):\n        payments = self.payment_mgr.get_all_payments()\n        self.table.setRowCount(len(payments))\n        \n        for row, payment in enumerate(payments):\n            self.table.setItem(row, 0, QTableWidgetItem(str(payment[0])))\n            self.table.setItem(row, 1, QTableWidgetItem(payment[6]))\n            self.table.setItem(row, 2, QTableWidgetItem(f'{payment[2]:.2f}'))\n            self.table.setItem(row, 3, QTableWidgetItem(payment[3]))\n            self.table.setItem(row, 4, QTableWidgetItem(payment[4] if payment[4] else ''))\n            \n            if self.current_user and self.current_user.get('role') == 'admin':\n                actions_widget = QWidget()\n                actions_layout = QHBoxLayout()\n                actions_layout.setContentsMargins(0, 0, 0, 0)\n                \n                edit_btn = QPushButton('✏️')\n                edit_btn.setFixedWidth(40)\n                edit_btn.clicked.connect(lambda checked, pid=payment[0]: self.edit_payment(pid))\n                actions_layout.addWidget(edit_btn)\n                \n                delete_btn = QPushButton('🗑️')\n                delete_btn.setFixedWidth(40)\n                delete_btn.setStyleSheet('background-color: #e74c3c; color: white;')\n                delete_btn.clicked.connect(lambda checked, pid=payment[0]: self.delete_payment(pid))\n                actions_layout.addWidget(delete_btn)\n                \n                actions_widget.setLayout(actions_layout)\n                self.table.setCellWidget(row, 5, actions_widget)\n            else:\n                no_access_label = QLabel('🔒')\n                no_access_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n                self.table.setCellWidget(row, 5, no_access_label)\n    \n    def edit_payment(self, payment_id):\n        if not self.current_user or self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', '⚠️ غير مصرح لك بتعديل البيانات')\n            return\n        \n        payment = self.payment_mgr.get_payment(payment_id)\n        if not payment:\n            QMessageBox.warning(self, 'خطأ', 'لم يتم العثور على الدفعة')\n            return\n        \n        patients = self.patient_mgr.get_all_patients('نشط')\n        all_patients = self.patient_mgr.get_all_patients()\n        \n        dialog = AddPaymentDialog(all_patients, self)\n        dialog.setWindowTitle('تعديل دفعة')\n        \n        for i in range(dialog.patient_combo.count()):\n            if dialog.patient_combo.itemData(i) == payment[1]:\n                dialog.patient_combo.setCurrentIndex(i)\n                break\n        \n        dialog.amount_input.setText(str(payment[2]))\n        dialog.date_input.setDate(QDate.fromString(payment[3], 'yyyy-MM-dd'))\n        dialog.notes_input.setText(payment[4] if payment[4] else '')\n        \n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            data = dialog.get_data()\n            if data['amount'] > 0:\n                self.payment_mgr.update_payment(\n                    payment_id, data['patient_id'], data['amount'],\n                    data['payment_date'], data['notes']\n                )\n                QMessageBox.information(self, 'نجح', 'تم تعديل الدفعة بنجاح')\n                self.load_payments()\n    \n    def delete_payment(self, payment_id):\n        if not self.current_user or self.current_user.get('role') != 'admin':\n            QMessageBox.warning(self, 'تحذير', '⚠️ غير مصرح لك بحذف البيانات')\n            return\n        \n        reply = QMessageBox.question(\n            self, 'تأكيد الحذف',\n            'هل أنت متأكد من حذف هذه الدفعة؟\\nلا يمكن التراجع عن هذا الإجراء.',\n            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n        )\n        \n        if reply == QMessageBox.StandardButton.Yes:\n            self.payment_mgr.delete_payment(payment_id)\n            QMessageBox.information(self, 'نجح', 'تم حذف الدفعة بنجاح')\n            self.load_payments()\n","size_bytes":8993},"modules/import_export.py":{"content":"import pandas as pd\nfrom openpyxl import load_workbook\nfrom datetime import datetime\n\nclass ImportExport:\n    def __init__(self, db, patient_mgr):\n        self.db = db\n        self.patient_mgr = patient_mgr\n    \n    def import_patients_from_excel(self, file_path):\n        try:\n            df = pd.read_excel(file_path)\n            \n            required_cols = ['الاسم', 'هاتف الأهل', 'تاريخ الدخول', 'القسم', 'التكلفة اليومية']\n            \n            for index, row in df.iterrows():\n                name = str(row.get('الاسم', ''))\n                family_phone = str(row.get('هاتف الأهل', ''))\n                admission_date = str(row.get('تاريخ الدخول', datetime.now().strftime('%Y-%m-%d')))\n                department = str(row.get('القسم', 'ديتوكس'))\n                daily_cost = float(row.get('التكلفة اليومية', 0))\n                receives_cigarettes = 1 if row.get('يستلم سجائر', 'لا') == 'نعم' else 0\n                cigarettes_count = int(row.get('عدد السجائر', 0))\n                \n                self.patient_mgr.add_patient(\n                    name, family_phone, admission_date, department,\n                    daily_cost, receives_cigarettes, cigarettes_count\n                )\n            \n            return True, len(df)\n        except Exception as e:\n            return False, str(e)\n    \n    def export_patients_to_excel(self, file_path):\n        try:\n            patients = self.patient_mgr.get_all_patients()\n            \n            data = []\n            for p in patients:\n                data.append({\n                    'الرقم': p[0],\n                    'الاسم': p[1],\n                    'هاتف الأهل': p[2],\n                    'تاريخ الدخول': p[3],\n                    'القسم': p[4],\n                    'التكلفة اليومية': p[5],\n                    'يستلم سجائر': 'نعم' if p[6] else 'لا',\n                    'عدد السجائر': p[7],\n                    'الحالة': p[8]\n                })\n            \n            df = pd.DataFrame(data)\n            df.to_excel(file_path, index=False, engine='openpyxl')\n            \n            return True\n        except Exception as e:\n            return False\n","size_bytes":2326},"modules/reports.py":{"content":"from datetime import datetime, timedelta\nimport os\nimport webbrowser\nimport tempfile\n\nclass ReportGenerator:\n    def __init__(self, db):\n        self.db = db\n    \n    def _get_html_template(self, title, content):\n        return f'''<!DOCTYPE html>\n<html dir=\"rtl\" lang=\"ar\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{title}</title>\n    <style>\n        @media print {{\n            body {{\n                margin: 0;\n                padding: 20px;\n            }}\n            .no-print {{\n                display: none;\n            }}\n        }}\n        \n        body {{\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            direction: rtl;\n            text-align: right;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            padding: 20px;\n            margin: 0;\n        }}\n        \n        .container {{\n            max-width: 900px;\n            margin: 0 auto;\n            background: white;\n            padding: 40px;\n            border-radius: 10px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }}\n        \n        .header {{\n            text-align: center;\n            border-bottom: 3px solid #667eea;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n        }}\n        \n        .header h1 {{\n            color: #667eea;\n            margin: 0;\n            font-size: 32px;\n            font-weight: bold;\n        }}\n        \n        .header h2 {{\n            color: #764ba2;\n            margin: 10px 0 0 0;\n            font-size: 24px;\n        }}\n        \n        .header .date {{\n            color: #666;\n            font-size: 14px;\n            margin-top: 10px;\n        }}\n        \n        .stats-grid {{\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n            margin: 30px 0;\n        }}\n        \n        .stat-card {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 20px;\n            border-radius: 10px;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        }}\n        \n        .stat-card.revenue {{\n            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\n        }}\n        \n        .stat-card.expenses {{\n            background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%);\n        }}\n        \n        .stat-card.profit {{\n            background: linear-gradient(135deg, #2193b0 0%, #6dd5ed 100%);\n        }}\n        \n        .stat-card h3 {{\n            margin: 0 0 10px 0;\n            font-size: 16px;\n            opacity: 0.9;\n        }}\n        \n        .stat-card .value {{\n            font-size: 28px;\n            font-weight: bold;\n            margin: 0;\n        }}\n        \n        .details-table {{\n            width: 100%;\n            border-collapse: collapse;\n            margin: 30px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }}\n        \n        .details-table th {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 15px;\n            text-align: right;\n            font-weight: bold;\n        }}\n        \n        .details-table td {{\n            padding: 12px 15px;\n            border-bottom: 1px solid #ddd;\n        }}\n        \n        .details-table tr:hover {{\n            background-color: #f5f5f5;\n        }}\n        \n        .summary {{\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 10px;\n            margin: 30px 0;\n        }}\n        \n        .summary h3 {{\n            color: #667eea;\n            margin-top: 0;\n        }}\n        \n        .footer {{\n            text-align: center;\n            margin-top: 40px;\n            padding-top: 20px;\n            border-top: 2px solid #eee;\n            color: #666;\n            font-size: 14px;\n        }}\n        \n        .print-button {{\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border: none;\n            padding: 15px 30px;\n            font-size: 16px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 20px auto;\n            display: block;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }}\n        \n        .print-button:hover {{\n            transform: translateY(-2px);\n            box-shadow: 0 6px 8px rgba(0,0,0,0.3);\n        }}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🏥 دار الحياة للطب النفسي وعلاج الإدمان</h1>\n            <h2>{title}</h2>\n            <div class=\"date\">تاريخ الطباعة: {datetime.now().strftime('%Y-%m-%d %H:%M')}</div>\n        </div>\n        \n        {content}\n        \n        <div class=\"footer\">\n            <p><strong>دار الحياة للطب النفسي وعلاج الإدمان</strong></p>\n            <p>نظام المحاسبة الإلكتروني</p>\n        </div>\n        \n        <button class=\"print-button no-print\" onclick=\"window.print()\">🖨️ طباعة التقرير</button>\n    </div>\n</body>\n</html>'''\n    \n    def generate_monthly_report(self, year, month, output_path):\n        from modules.payments import PaymentManager\n        from modules.expenses import ExpenseManager\n        from modules.patients import PatientManager\n        \n        payment_mgr = PaymentManager(self.db)\n        expense_mgr = ExpenseManager(self.db)\n        patient_mgr = PatientManager(self.db)\n        \n        revenue = payment_mgr.get_monthly_revenue(year, month)\n        expenses = expense_mgr.get_monthly_expenses(year, month)\n        profit = revenue - expenses\n        \n        active = patient_mgr.get_active_count()\n        graduated = patient_mgr.get_graduated_count()\n        \n        payments_query = '''\n            SELECT p.payment_date, pt.name, p.amount, p.notes \n            FROM payments p\n            JOIN patients pt ON p.patient_id = pt.id\n            WHERE strftime('%Y', p.payment_date) = ? AND strftime('%m', p.payment_date) = ?\n            ORDER BY p.payment_date DESC\n        '''\n        payments = self.db.fetchall(payments_query, (str(year), f'{month:02d}'))\n        \n        expenses_query = '''\n            SELECT expense_date, category, amount, description\n            FROM expenses\n            WHERE strftime('%Y', expense_date) = ? AND strftime('%m', expense_date) = ?\n            ORDER BY expense_date DESC\n        '''\n        expenses_list = self.db.fetchall(expenses_query, (str(year), f'{month:02d}'))\n        \n        payments_table = ''\n        if payments:\n            payments_table = '''\n            <h3>💰 المدفوعات</h3>\n            <table class=\"details-table\">\n                <tr>\n                    <th>التاريخ</th>\n                    <th>اسم المريض</th>\n                    <th>المبلغ</th>\n                    <th>ملاحظات</th>\n                </tr>\n            '''\n            for payment in payments:\n                notes = payment[3] if payment[3] else '-'\n                payments_table += f'''\n                <tr>\n                    <td>{payment[0]}</td>\n                    <td>{payment[1]}</td>\n                    <td>{payment[2]:.2f} جنيه</td>\n                    <td>{notes}</td>\n                </tr>\n                '''\n            payments_table += '</table>'\n        \n        expenses_table = ''\n        if expenses_list:\n            expenses_table = '''\n            <h3>💸 المصروفات</h3>\n            <table class=\"details-table\">\n                <tr>\n                    <th>التاريخ</th>\n                    <th>البند</th>\n                    <th>المبلغ</th>\n                    <th>الوصف</th>\n                </tr>\n            '''\n            for expense in expenses_list:\n                desc = expense[3] if expense[3] else '-'\n                expenses_table += f'''\n                <tr>\n                    <td>{expense[0]}</td>\n                    <td>{expense[1]}</td>\n                    <td>{expense[2]:.2f} جنيه</td>\n                    <td>{desc}</td>\n                </tr>\n                '''\n            expenses_table += '</table>'\n        \n        content = f'''\n        <div class=\"stats-grid\">\n            <div class=\"stat-card revenue\">\n                <h3>إجمالي الإيرادات</h3>\n                <div class=\"value\">{revenue:.2f} جنيه</div>\n            </div>\n            <div class=\"stat-card expenses\">\n                <h3>إجمالي المصروفات</h3>\n                <div class=\"value\">{expenses:.2f} جنيه</div>\n            </div>\n            <div class=\"stat-card profit\">\n                <h3>صافي الربح</h3>\n                <div class=\"value\">{profit:.2f} جنيه</div>\n            </div>\n        </div>\n        \n        <div class=\"summary\">\n            <h3>📊 ملخص الشهر</h3>\n            <p><strong>المرضى النشطون:</strong> {active} مريض</p>\n            <p><strong>الخريجون:</strong> {graduated} مريض</p>\n            <p><strong>عدد المدفوعات:</strong> {len(payments) if payments else 0}</p>\n            <p><strong>عدد المصروفات:</strong> {len(expenses_list) if expenses_list else 0}</p>\n        </div>\n        \n        {payments_table}\n        {expenses_table}\n        '''\n        \n        html = self._get_html_template(f'تقرير شهري - {year}/{month:02d}', content)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(html)\n        \n        webbrowser.open('file://' + os.path.abspath(output_path))\n        return True\n    \n    def generate_daily_report(self, date, output_path):\n        revenue_query = 'SELECT SUM(amount) FROM payments WHERE payment_date = ?'\n        revenue_result = self.db.fetchone(revenue_query, (date,))\n        revenue = float(revenue_result[0]) if revenue_result and revenue_result[0] is not None else 0.0\n        \n        expense_query = 'SELECT SUM(amount) FROM expenses WHERE expense_date = ?'\n        expenses_result = self.db.fetchone(expense_query, (date,))\n        expenses = float(expenses_result[0]) if expenses_result and expenses_result[0] is not None else 0.0\n        \n        profit = revenue - expenses\n        \n        payments_query = '''\n            SELECT p.payment_date, pt.name, p.amount, p.notes \n            FROM payments p\n            JOIN patients pt ON p.patient_id = pt.id\n            WHERE p.payment_date = ?\n            ORDER BY p.id DESC\n        '''\n        payments = self.db.fetchall(payments_query, (date,))\n        \n        expenses_query = '''\n            SELECT expense_date, category, amount, description\n            FROM expenses\n            WHERE expense_date = ?\n            ORDER BY id DESC\n        '''\n        expenses_list = self.db.fetchall(expenses_query, (date,))\n        \n        payments_table = ''\n        if payments:\n            payments_table = '''\n            <h3>💰 المدفوعات</h3>\n            <table class=\"details-table\">\n                <tr>\n                    <th>الوقت</th>\n                    <th>اسم المريض</th>\n                    <th>المبلغ</th>\n                    <th>ملاحظات</th>\n                </tr>\n            '''\n            for payment in payments:\n                notes = payment[3] if payment[3] else '-'\n                payments_table += f'''\n                <tr>\n                    <td>{payment[0]}</td>\n                    <td>{payment[1]}</td>\n                    <td>{payment[2]:.2f} جنيه</td>\n                    <td>{notes}</td>\n                </tr>\n                '''\n            payments_table += '</table>'\n        \n        expenses_table = ''\n        if expenses_list:\n            expenses_table = '''\n            <h3>💸 المصروفات</h3>\n            <table class=\"details-table\">\n                <tr>\n                    <th>الوقت</th>\n                    <th>البند</th>\n                    <th>المبلغ</th>\n                    <th>الوصف</th>\n                </tr>\n            '''\n            for expense in expenses_list:\n                desc = expense[3] if expense[3] else '-'\n                expenses_table += f'''\n                <tr>\n                    <td>{expense[0]}</td>\n                    <td>{expense[1]}</td>\n                    <td>{expense[2]:.2f} جنيه</td>\n                    <td>{desc}</td>\n                </tr>\n                '''\n            expenses_table += '</table>'\n        \n        content = f'''\n        <div class=\"stats-grid\">\n            <div class=\"stat-card revenue\">\n                <h3>إجمالي الإيرادات</h3>\n                <div class=\"value\">{revenue:.2f} جنيه</div>\n            </div>\n            <div class=\"stat-card expenses\">\n                <h3>إجمالي المصروفات</h3>\n                <div class=\"value\">{expenses:.2f} جنيه</div>\n            </div>\n            <div class=\"stat-card profit\">\n                <h3>صافي الربح</h3>\n                <div class=\"value\">{profit:.2f} جنيه</div>\n            </div>\n        </div>\n        \n        <div class=\"summary\">\n            <h3>📊 ملخص اليوم</h3>\n            <p><strong>عدد المدفوعات:</strong> {len(payments) if payments else 0}</p>\n            <p><strong>عدد المصروفات:</strong> {len(expenses_list) if expenses_list else 0}</p>\n        </div>\n        \n        {payments_table}\n        {expenses_table}\n        '''\n        \n        html = self._get_html_template(f'تقرير يومي - {date}', content)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(html)\n        \n        webbrowser.open('file://' + os.path.abspath(output_path))\n        return True\n    \n    def generate_weekly_report(self, start_date, end_date, output_path):\n        revenue_query = 'SELECT SUM(amount) FROM payments WHERE payment_date BETWEEN ? AND ?'\n        revenue_result = self.db.fetchone(revenue_query, (start_date, end_date))\n        revenue = float(revenue_result[0]) if revenue_result and revenue_result[0] is not None else 0.0\n        \n        expense_query = 'SELECT SUM(amount) FROM expenses WHERE expense_date BETWEEN ? AND ?'\n        expenses_result = self.db.fetchone(expense_query, (start_date, end_date))\n        expenses = float(expenses_result[0]) if expenses_result and expenses_result[0] is not None else 0.0\n        \n        profit = revenue - expenses\n        \n        payments_query = '''\n            SELECT p.payment_date, pt.name, p.amount, p.notes \n            FROM payments p\n            JOIN patients pt ON p.patient_id = pt.id\n            WHERE p.payment_date BETWEEN ? AND ?\n            ORDER BY p.payment_date DESC\n        '''\n        payments = self.db.fetchall(payments_query, (start_date, end_date))\n        \n        expenses_query = '''\n            SELECT expense_date, category, amount, description\n            FROM expenses\n            WHERE expense_date BETWEEN ? AND ?\n            ORDER BY expense_date DESC\n        '''\n        expenses_list = self.db.fetchall(expenses_query, (start_date, end_date))\n        \n        payments_table = ''\n        if payments:\n            payments_table = '''\n            <h3>💰 المدفوعات</h3>\n            <table class=\"details-table\">\n                <tr>\n                    <th>التاريخ</th>\n                    <th>اسم المريض</th>\n                    <th>المبلغ</th>\n                    <th>ملاحظات</th>\n                </tr>\n            '''\n            for payment in payments:\n                notes = payment[3] if payment[3] else '-'\n                payments_table += f'''\n                <tr>\n                    <td>{payment[0]}</td>\n                    <td>{payment[1]}</td>\n                    <td>{payment[2]:.2f} جنيه</td>\n                    <td>{notes}</td>\n                </tr>\n                '''\n            payments_table += '</table>'\n        \n        expenses_table = ''\n        if expenses_list:\n            expenses_table = '''\n            <h3>💸 المصروفات</h3>\n            <table class=\"details-table\">\n                <tr>\n                    <th>التاريخ</th>\n                    <th>البند</th>\n                    <th>المبلغ</th>\n                    <th>الوصف</th>\n                </tr>\n            '''\n            for expense in expenses_list:\n                desc = expense[3] if expense[3] else '-'\n                expenses_table += f'''\n                <tr>\n                    <td>{expense[0]}</td>\n                    <td>{expense[1]}</td>\n                    <td>{expense[2]:.2f} جنيه</td>\n                    <td>{desc}</td>\n                </tr>\n                '''\n            expenses_table += '</table>'\n        \n        content = f'''\n        <div class=\"stats-grid\">\n            <div class=\"stat-card revenue\">\n                <h3>إجمالي الإيرادات</h3>\n                <div class=\"value\">{revenue:.2f} جنيه</div>\n            </div>\n            <div class=\"stat-card expenses\">\n                <h3>إجمالي المصروفات</h3>\n                <div class=\"value\">{expenses:.2f} جنيه</div>\n            </div>\n            <div class=\"stat-card profit\">\n                <h3>صافي الربح</h3>\n                <div class=\"value\">{profit:.2f} جنيه</div>\n            </div>\n        </div>\n        \n        <div class=\"summary\">\n            <h3>📊 ملخص الفترة</h3>\n            <p><strong>من تاريخ:</strong> {start_date}</p>\n            <p><strong>إلى تاريخ:</strong> {end_date}</p>\n            <p><strong>عدد المدفوعات:</strong> {len(payments) if payments else 0}</p>\n            <p><strong>عدد المصروفات:</strong> {len(expenses_list) if expenses_list else 0}</p>\n        </div>\n        \n        {payments_table}\n        {expenses_table}\n        '''\n        \n        html = self._get_html_template(f'تقرير أسبوعي - من {start_date} إلى {end_date}', content)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(html)\n        \n        webbrowser.open('file://' + os.path.abspath(output_path))\n        return True\n    \n    def generate_yearly_report(self, year, output_path):\n        from modules.payments import PaymentManager\n        from modules.expenses import ExpenseManager\n        from modules.patients import PatientManager\n        \n        payment_mgr = PaymentManager(self.db)\n        expense_mgr = ExpenseManager(self.db)\n        patient_mgr = PatientManager(self.db)\n        \n        revenue_query = \"SELECT SUM(amount) FROM payments WHERE strftime('%Y', payment_date) = ?\"\n        revenue_result = self.db.fetchone(revenue_query, (str(year),))\n        revenue = float(revenue_result[0]) if revenue_result and revenue_result[0] is not None else 0.0\n        \n        expense_query = \"SELECT SUM(amount) FROM expenses WHERE strftime('%Y', expense_date) = ?\"\n        expenses_result = self.db.fetchone(expense_query, (str(year),))\n        expenses = float(expenses_result[0]) if expenses_result and expenses_result[0] is not None else 0.0\n        \n        profit = revenue - expenses\n        \n        active = patient_mgr.get_active_count()\n        graduated = patient_mgr.get_graduated_count()\n        \n        monthly_stats = []\n        for month in range(1, 13):\n            month_revenue = payment_mgr.get_monthly_revenue(year, month)\n            month_expenses = expense_mgr.get_monthly_expenses(year, month)\n            month_profit = month_revenue - month_expenses\n            monthly_stats.append((month, month_revenue, month_expenses, month_profit))\n        \n        month_names = ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',\n                      'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']\n        \n        monthly_table = '''\n        <h3>📅 الإحصائيات الشهرية</h3>\n        <table class=\"details-table\">\n            <tr>\n                <th>الشهر</th>\n                <th>الإيرادات</th>\n                <th>المصروفات</th>\n                <th>الربح</th>\n            </tr>\n        '''\n        \n        for month, m_revenue, m_expenses, m_profit in monthly_stats:\n            monthly_table += f'''\n            <tr>\n                <td>{month_names[month-1]}</td>\n                <td>{m_revenue:.2f} جنيه</td>\n                <td>{m_expenses:.2f} جنيه</td>\n                <td>{m_profit:.2f} جنيه</td>\n            </tr>\n            '''\n        monthly_table += '</table>'\n        \n        content = f'''\n        <div class=\"stats-grid\">\n            <div class=\"stat-card revenue\">\n                <h3>إجمالي الإيرادات</h3>\n                <div class=\"value\">{revenue:.2f} جنيه</div>\n            </div>\n            <div class=\"stat-card expenses\">\n                <h3>إجمالي المصروفات</h3>\n                <div class=\"value\">{expenses:.2f} جنيه</div>\n            </div>\n            <div class=\"stat-card profit\">\n                <h3>صافي الربح</h3>\n                <div class=\"value\">{profit:.2f} جنيه</div>\n            </div>\n        </div>\n        \n        <div class=\"summary\">\n            <h3>📊 ملخص السنة</h3>\n            <p><strong>المرضى النشطون:</strong> {active} مريض</p>\n            <p><strong>الخريجون:</strong> {graduated} مريض</p>\n        </div>\n        \n        {monthly_table}\n        '''\n        \n        html = self._get_html_template(f'تقرير سنوي - {year}', content)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(html)\n        \n        webbrowser.open('file://' + os.path.abspath(output_path))\n        return True\n","size_bytes":21996},"replit.md":{"content":"# Overview\n\n\"دار الحياة\" (Dar Alhayat) is a comprehensive desktop application for managing a psychiatric and addiction treatment facility. Built with PyQt6 and SQLite, it provides an Arabic-language interface for managing patients, payments, expenses, employees, and generating financial reports. The system tracks patient admissions, daily costs, cigarette allocations, payments, and produces detailed accounting statements.\n\n## Recent Updates (October 2025)\n\n### NEW FEATURES (Latest Update - October 13, 2025)\n\n#### 1. Edit/Delete Functionality for Payments, Expenses, and Employees (Admin-Only)\n- **Permission-Based Access**: Admin users can edit and delete records; regular users see a lock icon 🔒\n- **Features**:\n  - Edit buttons (✏️) pre-fill dialogs with existing data for quick updates\n  - Delete buttons (🗑️) with confirmation dialogs to prevent accidental deletion\n  - Backend permission validation prevents unauthorized operations\n  - Cascading delete for employees: removes all associated financial transactions automatically\n- **UI Indicators**:\n  - Admin: sees edit and delete buttons\n  - User: sees lock icon and receives warning message when attempting restricted operations\n  \n#### 2. Enhanced Text Editor Features\n- **Cell Merging**: \n  - Merge multiple cells into one (specify rows × columns)\n  - Unmerge previously merged cells\n  - Visual feedback showing merge dimensions\n- **Text Formatting**:\n  - Text color picker 🎨\n  - Background color picker 🖌️\n  - Bullet lists (•)\n  - Numbered lists (1. 2. 3.)\n- **Editing Tools**:\n  - Undo button (↶ تراجع)\n  - Redo button (↷ إعادة)\n- **Access**: Right-click context menu or toolbar buttons\n\n### PREVIOUS FEATURES (October 13, 2025)\n\n#### 1. Unified Cigarette Pricing System\n- **Single Price Source**: All cigarette cost calculations now use the unified `cigarette_pack_price` setting\n- **Automatic Application**: Price changes from the cigarettes page immediately affect all patient statements\n- **Consistent Calculations**: Both cigarettes dashboard and patient account statements use the same formula: `(cigarettes_per_day / 20) * days * cigarette_pack_price`\n- **Impact Preview**: Confirmation dialog shows affected patients and financial impact before price changes\n- **Audit Logging**: All price changes are logged to `audit_log` table with timestamp and user information\n\n#### 2. Enhanced Table Editing in Text Editor\n- **Context Menu**: Right-click on any table to access editing options\n- **Row Operations**:\n  - Add row: Inserts new row after current position\n  - Remove row: Deletes current row (with protection against removing last row)\n- **Column Operations**:\n  - Add column: Inserts new column after current position\n  - Remove column: Deletes current column (with protection against removing last column)\n- **Table Properties Editor**:\n  - Border style: Choose from None, Solid, Double, Dotted, or Dashed\n  - Border width: Adjustable from 0 to 10 pixels\n  - Cell padding: Control internal spacing (0-20 pixels)\n  - Cell spacing: Control spacing between cells (0-20 pixels)\n- **Quick Access**: Toolbar button \"✏️ تحرير جدول\" for direct table editing\n- **Word Export**: Table formatting preserved when saving as .docx\n\n#### 3. Excel Import for Patients\n- **Import Widget** (`ui/import_patients_widget.py`): New dedicated page for importing patients from Excel files\n- **Features**:\n  - Uses openpyxl/pandas for Excel file reading\n  - Preview window showing valid and invalid records with error details\n  - Batch insertion to database (50 records per batch)\n  - Operation logging to `import_log.txt`\n  - Safe error handling with try/except blocks\n  - No impact on existing patient tables or interfaces\n\n#### 2. User Permissions System\n- **Role-Based Access Control**: Implemented permission checks based on user role\n- **Two User Types**:\n  - **Admin**: Full access (add, edit, delete, discharge)\n  - **User**: Add-only access (cannot edit or delete)\n- **Permission Enforcement**:\n  - Protection in all widgets (Patients, Payments, Expenses, Employees) for edit, delete, and discharge operations\n  - Warning message: \"⚠️ غير مصرح لك بتعديل أو حذف البيانات\"\n  - Backend validation prevents unauthorized operations even via shortcuts\n  - Cascading delete ensures data integrity (e.g., deleting employee removes their transactions)\n\n#### 3. Calculator Redesign\n- **New Button Layout** (Left to Right):\n  ```\n  7 8 9\n  4 5 6\n  1 2 3\n  0 . =\n  ```\n- **LTR Display**: Numbers displayed left-to-right for better readability\n- **Simplified Design**: Removed extra operations, kept core functionality\n- **No Logic Changes**: Mathematical operations work exactly as before\n\n#### 4. Text Editor Widget\n- **Professional Text Editor** (`ui/text_editor_widget.py`)\n- **Features**:\n  - Text formatting: Bold, Italic, Underline\n  - Alignment: Left, Center, Right\n  - Font selection and size control\n  - Text and background colors\n  - Bullet and numbered lists\n  - Table cell merging and splitting\n  - Undo/Redo functionality\n  - Save as .txt or .docx files\n  - Open previously saved files\n  - Direct printing support\n  - RTL support for Arabic text in Word documents\n\n#### 5. Cigarette Price Update System\n- **Impact Preview**: Shows confirmation dialog before price change with:\n  - Old price vs new price comparison\n  - Number of affected patients\n  - Daily financial impact calculation\n- **Automatic Recalculation**: Patient statements use new price immediately (calculated dynamically)\n- **Change Logging**: All price changes logged to `cigarette_price_log.txt` with:\n  - Timestamp\n  - Old and new prices\n  - Number of affected patients\n  - Financial impact details\n- **Important**: Patient statement costs are calculated on-demand, not stored. When price changes, all future calculations automatically use the new price.\n\n### Authentication & Security\n- **Bcrypt Password Hashing**: Implemented secure password storage using bcrypt encryption\n- **New Users Created**: \n  - Admin user (username: admin, password: 1231)\n  - Accountant user (username: user, password: 1)\n- **Auth Module**: Created dedicated authentication manager (`modules/auth.py`) for user management\n- **Permission System**: Role-based access control for sensitive operations\n\n### UI/UX Enhancements\n- **Bold Fonts**: Applied bold font styling (QFont.Weight.Bold) application-wide for better readability\n- **Search Functionality**: Added search bars for patients with real-time filtering by name or phone\n- **Filter & Sort Options**: \n  - Status filter (All, Active, Discharged)\n  - Sort options (Alphabetical ascending/descending, Oldest first, Newest first)\n- **Wider Table Columns**: Set fixed column widths for better data visibility (Name: 300px, Phone: 150px, etc.)\n- **Auto-fit Button**: Added button to automatically resize columns to fit content\n\n### Patient Management Improvements\n- **Action Buttons**: Added edit (✏️), delete (🗑️), and discharge (🏁) buttons for each patient\n- **Edit Patient**: Pre-filled dialog for updating patient information\n- **Delete Patient**: Confirmation dialog before permanent deletion\n- **Discharge Patient**: One-click patient discharge with automatic status update\n\n### Cigarette Cost Calculation\n- **Unified Pricing**: All cigarette cost calculations use the single `cigarette_pack_price` setting from the cigarettes page\n- **Formula**: `(cigarettes_per_day / 20) * days * cigarette_pack_price`\n- **Dynamic Calculation**: Patient statement costs are calculated on-demand, ensuring price changes apply immediately to all patients\n\n### Database Management\n- **Import Functionality**: Added database import feature with automatic backup and cleanup\n- **Backup System**: Creates timestamped backups before any database replacement\n- **Auto-cleanup**: Removes old database files while preserving the imported one\n- **Settings Integration**: Database import button added to Settings page\n\n### Technical Improvements\n- **Environment Setup**: Updated to PyQt6 6.9.1+ for Qt 6.9 compatibility\n- **System Dependencies**: Installed libxkbcommon, libGL, xorg packages for proper display\n- **Xvfb Integration**: Configured virtual X server for VNC display support\n- **Display Configuration**: Set DISPLAY=:99 for Replit VNC compatibility\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**UI Framework**: PyQt6 with dark theme (qdarkstyle)\n- **Main Window Structure**: Stacked widget pattern for multi-page navigation\n- **Login System**: Simple authentication window before accessing main application\n- **Key UI Components**:\n  - Dashboard with statistics cards and matplotlib charts\n  - Patient management with admission/discharge tracking\n  - Payment tracking and receipt generation\n  - Expense categorization and reporting\n  - Employee management with transaction history\n  - Cigarette inventory and pricing settings\n  - Built-in calculator widget\n  \n**Design Patterns**:\n- Right-to-left (RTL) layout for Arabic text support\n- Responsive table widgets with custom headers\n- Modal dialogs for data entry (Add/Edit operations)\n- HTML-based report generation with print preview\n\n## Backend Architecture\n\n**Database Layer**: SQLite with direct SQL queries (no ORM)\n- **Database Class** (`db/database.py`): Connection management and table creation\n- **Manager Classes**: Business logic separation\n  - `PatientManager`: Patient CRUD operations and status tracking\n  - `PaymentManager`: Payment recording and revenue calculations\n  - `ExpenseManager`: Expense categorization and aggregation\n  - `EmployeeManager`: Employee records and salary transactions\n  \n**Data Model**:\n- Patients: admission_date, department, daily_cost, cigarette tracking, discharge status\n- Payments: patient-linked transactions with dates and notes\n- Expenses: categorized spending with descriptions\n- Employees: positions, salaries, and transaction history\n- Settings: system configuration (cigarette pricing, etc.)\n\n**Business Logic**:\n- Patient status lifecycle: نشط (active) → متخرج (discharged)\n- Daily cost calculation: (discharge_date - admission_date) × daily_cost\n- Cigarette cost calculation: cigarettes_per_day × days × (box_cost / cigarettes_per_box)\n- Revenue/expense aggregation by month and category\n\n## Report Generation\n\n**HTML-Based Reports**: Generated in-memory and opened in browser\n- Patient account statements with itemized costs\n- Daily financial summaries\n- Monthly revenue/expense reports\n- Custom date range filtering\n\n**Export Capabilities**:\n- Excel export using pandas/openpyxl\n- Excel import for bulk patient data\n- PDF generation support (reportlab in requirements)\n\n## Text Processing\n\n**Arabic Language Support**:\n- arabic-reshaper: Proper Arabic character rendering\n- python-bidi: Bidirectional text algorithm implementation\n- RTL UI layouts throughout application\n\n## Packaging\n\n**Deployment**: PyInstaller for standalone executable\n- Windows .exe generation with bundled resources\n- Included assets: db folder, ui folder, modules, icon\n- Single-file distribution option\n\n# External Dependencies\n\n## Core UI Framework\n- **PyQt6**: Modern Qt6 Python bindings for desktop GUI\n- **qdarkstyle**: Dark theme stylesheet for professional appearance\n\n## Database\n- **SQLite**: Embedded relational database (via Python stdlib)\n- **sqlalchemy**: Listed but not actively used (direct sqlite3 queries instead)\n\n## Data Processing\n- **pandas**: DataFrame operations for Excel import/export\n- **openpyxl**: Excel file format handling\n\n## Visualization & Reports\n- **matplotlib**: Chart generation for dashboard statistics\n- **reportlab**: PDF report generation capabilities\n\n## Security\n- **bcrypt**: Password hashing for authentication system\n\n## Text & Internationalization\n- **arabic-reshaper**: Arabic text shaping for proper display\n- **python-bidi**: Unicode bidirectional algorithm for RTL text\n\n## Notes\n- Application uses direct SQLite connections rather than SQLAlchemy ORM despite it being listed\n- All UI text is in Arabic with RTL layout support\n- Database schema is created programmatically on first run\n- No external API integrations or cloud services currently implemented","size_bytes":12242},"modules/db_import.py":{"content":"import os\nimport shutil\nfrom datetime import datetime\nfrom PyQt6.QtWidgets import QDialog, QVBoxLayout, QPushButton, QLabel, QFileDialog, QMessageBox\n\nclass DatabaseImportDialog(QDialog):\n    def __init__(self, current_db_path, parent=None):\n        super().__init__(parent)\n        self.current_db_path = current_db_path\n        self.setWindowTitle('استيراد قاعدة بيانات')\n        self.setFixedSize(500, 300)\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        info_label = QLabel('''\n        <div style=\"text-align: right; direction: rtl;\">\n        <h3>استيراد قاعدة بيانات جديدة</h3>\n        <p><b>تنبيه:</b> سيتم:</p>\n        <ul>\n            <li>حفظ نسخة احتياطية من القاعدة الحالية</li>\n            <li>حذف جميع قواعد البيانات القديمة</li>\n            <li>استيراد القاعدة الجديدة</li>\n        </ul>\n        <p style=\"color: red;\">هذا الإجراء لا يمكن التراجع عنه!</p>\n        </div>\n        ''')\n        info_label.setWordWrap(True)\n        layout.addWidget(info_label)\n        \n        import_btn = QPushButton('📁 اختر ملف قاعدة البيانات')\n        import_btn.clicked.connect(self.import_database)\n        layout.addWidget(import_btn)\n        \n        close_btn = QPushButton('إلغاء')\n        close_btn.clicked.connect(self.reject)\n        layout.addWidget(close_btn)\n        \n        self.setLayout(layout)\n    \n    def import_database(self):\n        file_path, _ = QFileDialog.getOpenFileName(\n            self,\n            'اختر ملف قاعدة البيانات',\n            '',\n            'Database Files (*.db *.sqlite);;All Files (*.*)'\n        )\n        \n        if not file_path:\n            return\n        \n        reply = QMessageBox.question(\n            self,\n            'تأكيد الاستيراد',\n            'سيتم حذف كل قواعد البيانات القديمة والاحتفاظ بقاعدة البيانات الجديدة فقط. متأكد؟',\n            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n        )\n        \n        if reply == QMessageBox.StandardButton.Yes:\n            try:\n                db_dir = os.path.dirname(self.current_db_path)\n                backup_dir = os.path.join(db_dir, 'backups')\n                os.makedirs(backup_dir, exist_ok=True)\n                \n                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n                backup_file = os.path.join(backup_dir, f'backup_before_import_{timestamp}.db')\n                \n                if os.path.exists(self.current_db_path):\n                    shutil.copy2(self.current_db_path, backup_file)\n                \n                import glob\n                db_files = glob.glob('*.db') + glob.glob('*.sqlite')\n                db_files += glob.glob('db/**/*.db', recursive=True)\n                db_files += glob.glob('db/**/*.sqlite', recursive=True)\n                \n                for db_file in db_files:\n                    if 'backup' not in db_file and os.path.abspath(db_file) != os.path.abspath(file_path):\n                        try:\n                            os.remove(db_file)\n                        except:\n                            pass\n                \n                shutil.copy2(file_path, self.current_db_path)\n                \n                QMessageBox.information(\n                    self,\n                    'نجح',\n                    f'تم استيراد قاعدة البيانات بنجاح!\\nتم حفظ نسخة احتياطية في:\\n{backup_file}\\n\\nيرجى إعادة تشغيل التطبيق.'\n                )\n                self.accept()\n                \n            except Exception as e:\n                QMessageBox.critical(\n                    self,\n                    'خطأ',\n                    f'حدث خطأ أثناء استيراد قاعدة البيانات:\\n{str(e)}'\n                )\n","size_bytes":4051},"modules/auth.py":{"content":"import bcrypt\nfrom datetime import datetime\n\nclass AuthManager:\n    def __init__(self, db):\n        self.db = db\n    \n    def hash_password(self, password):\n        salt = bcrypt.gensalt()\n        return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')\n    \n    def verify_password(self, password, hashed):\n        try:\n            return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))\n        except:\n            return password == hashed\n    \n    def authenticate(self, username, password):\n        query = 'SELECT id, username, password, full_name, role FROM users WHERE username = ?'\n        user = self.db.fetchone(query, (username,))\n        \n        if user and self.verify_password(password, user[2]):\n            return {\n                'id': user[0],\n                'username': user[1],\n                'full_name': user[3],\n                'role': user[4]\n            }\n        return None\n    \n    def create_user(self, username, password, full_name='', role='user'):\n        hashed_password = self.hash_password(password)\n        query = '''\n            INSERT INTO users (username, password, full_name, role)\n            VALUES (?, ?, ?, ?)\n        '''\n        try:\n            self.db.execute(query, (username, hashed_password, full_name, role))\n            return True\n        except:\n            return False\n    \n    def update_password(self, username, new_password):\n        hashed_password = self.hash_password(new_password)\n        query = 'UPDATE users SET password = ? WHERE username = ?'\n        try:\n            self.db.execute(query, (hashed_password, username))\n            return True\n        except:\n            return False\n    \n    def initialize_default_users(self):\n        admin_exists = self.db.fetchone(\"SELECT COUNT(*) FROM users WHERE username = 'admin'\")\n        if admin_exists and admin_exists[0] == 0:\n            self.create_user('admin', '1231', 'مدير النظام', 'admin')\n        else:\n            self.update_password('admin', '1231')\n        \n        user_exists = self.db.fetchone(\"SELECT COUNT(*) FROM users WHERE username = 'user'\")\n        if user_exists and user_exists[0] == 0:\n            self.create_user('user', '1', 'محاسب', 'accountant')\n","size_bytes":2241},"ui/text_editor_widget.py":{"content":"# --- NEW FEATURE: Text Editor ---\nfrom PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, \n                             QTextEdit, QFileDialog, QMessageBox, QToolBar,\n                             QFontComboBox, QSpinBox, QDialog, QLabel,\n                             QDialogButtonBox, QMenu, QDoubleSpinBox, QComboBox,\n                             QColorDialog)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import (QFont, QTextCharFormat, QTextCursor, QPageSize, QPageLayout, \n                         QTextTableFormat, QAction, QColor, QTextListFormat)\nfrom PyQt6.QtPrintSupport import QPrinter, QPrintDialog\nfrom docx import Document\nfrom docx.shared import Pt, Inches\nfrom docx.enum.text import WD_ALIGN_PARAGRAPH\nfrom bs4 import BeautifulSoup\nimport os\n\nclass TextEditorWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.current_file = None\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        # Toolbar\n        toolbar_layout = QHBoxLayout()\n        \n        # Font selection\n        self.font_combo = QFontComboBox()\n        self.font_combo.currentFontChanged.connect(self.change_font)\n        toolbar_layout.addWidget(self.font_combo)\n        \n        # Font size\n        self.font_size = QSpinBox()\n        self.font_size.setValue(12)\n        self.font_size.setMinimum(6)\n        self.font_size.setMaximum(72)\n        self.font_size.valueChanged.connect(self.change_font_size)\n        toolbar_layout.addWidget(self.font_size)\n        \n        # Bold button\n        bold_btn = QPushButton('B')\n        bold_btn.setFont(QFont('Arial', 12, QFont.Weight.Bold))\n        bold_btn.setCheckable(True)\n        bold_btn.clicked.connect(self.toggle_bold)\n        bold_btn.setFixedWidth(40)\n        toolbar_layout.addWidget(bold_btn)\n        \n        # Italic button\n        italic_btn = QPushButton('I')\n        italic_btn.setFont(QFont('Arial', 12, QFont.Weight.Normal))\n        italic_btn.font().setItalic(True)\n        italic_btn.setCheckable(True)\n        italic_btn.clicked.connect(self.toggle_italic)\n        italic_btn.setFixedWidth(40)\n        toolbar_layout.addWidget(italic_btn)\n        \n        # Underline button\n        underline_btn = QPushButton('U')\n        underline_btn.setFont(QFont('Arial', 12, QFont.Weight.Normal))\n        underline_btn.font().setUnderline(True)\n        underline_btn.setCheckable(True)\n        underline_btn.clicked.connect(self.toggle_underline)\n        underline_btn.setFixedWidth(40)\n        toolbar_layout.addWidget(underline_btn)\n        \n        toolbar_layout.addSpacing(20)\n        \n        # Alignment buttons\n        align_left_btn = QPushButton('⬅')\n        align_left_btn.clicked.connect(self.align_left)\n        align_left_btn.setFixedWidth(40)\n        toolbar_layout.addWidget(align_left_btn)\n        \n        align_center_btn = QPushButton('↔')\n        align_center_btn.clicked.connect(self.align_center)\n        align_center_btn.setFixedWidth(40)\n        toolbar_layout.addWidget(align_center_btn)\n        \n        align_right_btn = QPushButton('➡')\n        align_right_btn.clicked.connect(self.align_right)\n        align_right_btn.setFixedWidth(40)\n        toolbar_layout.addWidget(align_right_btn)\n        \n        toolbar_layout.addSpacing(20)\n        \n        text_color_btn = QPushButton('🎨 لون النص')\n        text_color_btn.clicked.connect(self.change_text_color)\n        toolbar_layout.addWidget(text_color_btn)\n        \n        bg_color_btn = QPushButton('🖌️ لون الخلفية')\n        bg_color_btn.clicked.connect(self.change_background_color)\n        toolbar_layout.addWidget(bg_color_btn)\n        \n        toolbar_layout.addSpacing(20)\n        \n        bullet_btn = QPushButton('• قائمة منقطة')\n        bullet_btn.clicked.connect(self.insert_bullet_list)\n        toolbar_layout.addWidget(bullet_btn)\n        \n        numbered_btn = QPushButton('1. قائمة مرقمة')\n        numbered_btn.clicked.connect(self.insert_numbered_list)\n        toolbar_layout.addWidget(numbered_btn)\n        \n        toolbar_layout.addStretch()\n        layout.addLayout(toolbar_layout)\n        \n        # Text editor\n        self.text_edit = QTextEdit()\n        self.text_edit.setFont(QFont('Arial', 12))\n        self.text_edit.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)\n        self.text_edit.customContextMenuRequested.connect(self.show_context_menu)\n        layout.addWidget(self.text_edit)\n        \n        # Action buttons\n        btn_layout = QHBoxLayout()\n        \n        new_btn = QPushButton('📄 جديد')\n        new_btn.clicked.connect(self.new_document)\n        btn_layout.addWidget(new_btn)\n        \n        open_btn = QPushButton('📂 فتح')\n        open_btn.clicked.connect(self.open_file)\n        btn_layout.addWidget(open_btn)\n        \n        save_txt_btn = QPushButton('💾 حفظ TXT')\n        save_txt_btn.clicked.connect(self.save_as_txt)\n        btn_layout.addWidget(save_txt_btn)\n        \n        save_docx_btn = QPushButton('💾 حفظ DOCX')\n        save_docx_btn.clicked.connect(self.save_as_docx)\n        btn_layout.addWidget(save_docx_btn)\n        \n        print_btn = QPushButton('🖨️ طباعة')\n        print_btn.clicked.connect(self.print_document)\n        btn_layout.addWidget(print_btn)\n        \n        # --- NEW (زر إدراج جدول) ---\n        insert_table_btn = QPushButton('📊 إدراج جدول')\n        insert_table_btn.clicked.connect(self.insert_table)\n        btn_layout.addWidget(insert_table_btn)\n        \n        edit_table_btn = QPushButton('✏️ تحرير جدول')\n        edit_table_btn.clicked.connect(self.edit_current_table)\n        btn_layout.addWidget(edit_table_btn)\n        \n        undo_btn = QPushButton('↶ تراجع')\n        undo_btn.clicked.connect(self.text_edit.undo)\n        btn_layout.addWidget(undo_btn)\n        \n        redo_btn = QPushButton('↷ إعادة')\n        redo_btn.clicked.connect(self.text_edit.redo)\n        btn_layout.addWidget(redo_btn)\n        \n        btn_layout.addStretch()\n        layout.addLayout(btn_layout)\n        \n        self.setLayout(layout)\n    \n    def change_font(self, font):\n        self.text_edit.setCurrentFont(font)\n    \n    def change_font_size(self, size):\n        self.text_edit.setFontPointSize(size)\n    \n    def toggle_bold(self):\n        fmt = QTextCharFormat()\n        if self.text_edit.fontWeight() == QFont.Weight.Bold:\n            fmt.setFontWeight(QFont.Weight.Normal)\n        else:\n            fmt.setFontWeight(QFont.Weight.Bold)\n        self.text_edit.mergeCurrentCharFormat(fmt)\n    \n    def toggle_italic(self):\n        fmt = QTextCharFormat()\n        fmt.setFontItalic(not self.text_edit.fontItalic())\n        self.text_edit.mergeCurrentCharFormat(fmt)\n    \n    def toggle_underline(self):\n        fmt = QTextCharFormat()\n        fmt.setFontUnderline(not self.text_edit.fontUnderline())\n        self.text_edit.mergeCurrentCharFormat(fmt)\n    \n    def align_left(self):\n        self.text_edit.setAlignment(Qt.AlignmentFlag.AlignLeft)\n    \n    def align_center(self):\n        self.text_edit.setAlignment(Qt.AlignmentFlag.AlignCenter)\n    \n    def align_right(self):\n        self.text_edit.setAlignment(Qt.AlignmentFlag.AlignRight)\n    \n    def change_text_color(self):\n        color = QColorDialog.getColor()\n        if color.isValid():\n            fmt = QTextCharFormat()\n            fmt.setForeground(color)\n            self.text_edit.mergeCurrentCharFormat(fmt)\n    \n    def change_background_color(self):\n        color = QColorDialog.getColor()\n        if color.isValid():\n            fmt = QTextCharFormat()\n            fmt.setBackground(color)\n            self.text_edit.mergeCurrentCharFormat(fmt)\n    \n    def insert_bullet_list(self):\n        cursor = self.text_edit.textCursor()\n        list_format = QTextListFormat()\n        list_format.setStyle(QTextListFormat.Style.ListDisc)\n        cursor.createList(list_format)\n    \n    def insert_numbered_list(self):\n        cursor = self.text_edit.textCursor()\n        list_format = QTextListFormat()\n        list_format.setStyle(QTextListFormat.Style.ListDecimal)\n        cursor.createList(list_format)\n    \n    def new_document(self):\n        if self.text_edit.document().isModified():\n            reply = QMessageBox.question(\n                self,\n                'حفظ التغييرات؟',\n                'هل تريد حفظ التغييرات قبل إنشاء مستند جديد؟',\n                QMessageBox.StandardButton.Yes | \n                QMessageBox.StandardButton.No | \n                QMessageBox.StandardButton.Cancel\n            )\n            \n            if reply == QMessageBox.StandardButton.Yes:\n                self.save_as_txt()\n            elif reply == QMessageBox.StandardButton.Cancel:\n                return\n        \n        self.text_edit.clear()\n        self.current_file = None\n    \n    def open_file(self):\n        file_path, _ = QFileDialog.getOpenFileName(\n            self,\n            'فتح ملف',\n            '',\n            'Text Files (*.txt);;Word Documents (*.docx);;All Files (*)'\n        )\n        \n        if file_path:\n            try:\n                if file_path.endswith('.txt'):\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        self.text_edit.setPlainText(f.read())\n                elif file_path.endswith('.docx'):\n                    doc = Document(file_path)\n                    full_text = []\n                    for para in doc.paragraphs:\n                        full_text.append(para.text)\n                    self.text_edit.setPlainText('\\n'.join(full_text))\n                \n                self.current_file = file_path\n                QMessageBox.information(self, 'نجح', 'تم فتح الملف بنجاح')\n            except Exception as e:\n                QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء فتح الملف:\\n{str(e)}')\n    \n    def save_as_txt(self):\n        file_path, _ = QFileDialog.getSaveFileName(\n            self,\n            'حفظ كملف نصي',\n            self.current_file if self.current_file and self.current_file.endswith('.txt') else 'document.txt',\n            'Text Files (*.txt)'\n        )\n        \n        if file_path:\n            try:\n                with open(file_path, 'w', encoding='utf-8') as f:\n                    f.write(self.text_edit.toPlainText())\n                \n                self.current_file = file_path\n                self.text_edit.document().setModified(False)\n                QMessageBox.information(self, 'نجح', 'تم حفظ الملف بنجاح')\n            except Exception as e:\n                QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء الحفظ:\\n{str(e)}')\n    \n    def save_as_docx(self):\n        file_path, _ = QFileDialog.getSaveFileName(\n            self,\n            'حفظ كمستند Word',\n            self.current_file if self.current_file and self.current_file.endswith('.docx') else 'document.docx',\n            'Word Documents (*.docx)'\n        )\n        \n        if file_path:\n            try:\n                doc = Document()\n                \n                # --- FIX (تحويل الجداول من QTextEdit إلى Word) ---\n                # Get HTML content to preserve tables\n                html_content = self.text_edit.toHtml()\n                soup = BeautifulSoup(html_content, 'html.parser')\n                \n                # Process HTML elements\n                for element in soup.find_all(['p', 'table']):\n                    if element.name == 'table':\n                        # Extract table data\n                        rows_data = []\n                        for tr in element.find_all('tr'):\n                            row_data = []\n                            for td in tr.find_all('td'):\n                                row_data.append(td.get_text(strip=True))\n                            if row_data:\n                                rows_data.append(row_data)\n                        \n                        # Create Word table\n                        if rows_data:\n                            num_rows = len(rows_data)\n                            num_cols = len(rows_data[0]) if rows_data else 0\n                            \n                            if num_cols > 0:\n                                table = doc.add_table(rows=num_rows, cols=num_cols)\n                                table.style = 'Table Grid'\n                                \n                                # Fill table with data\n                                for i, row_data in enumerate(rows_data):\n                                    for j, cell_text in enumerate(row_data):\n                                        if j < len(table.rows[i].cells):\n                                            table.rows[i].cells[j].text = cell_text\n                                            # Set RTL for Arabic text\n                                            for paragraph in table.rows[i].cells[j].paragraphs:\n                                                paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT\n                    \n                    elif element.name == 'p':\n                        # Add paragraph\n                        text = element.get_text(strip=True)\n                        if text:\n                            para = doc.add_paragraph(text)\n                            para.alignment = WD_ALIGN_PARAGRAPH.RIGHT\n                        else:\n                            doc.add_paragraph()\n                \n                doc.save(file_path)\n                self.current_file = file_path\n                self.text_edit.document().setModified(False)\n                QMessageBox.information(self, 'نجح', 'تم حفظ الملف بنجاح مع الجداول')\n            except Exception as e:\n                QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء الحفظ:\\n{str(e)}')\n    \n    def insert_table(self):\n        # --- NEW (إدراج جدول في محرر النصوص) ---\n        dialog = QDialog(self)\n        dialog.setWindowTitle('إدراج جدول')\n        dialog.setFixedWidth(350)\n        \n        layout = QVBoxLayout()\n        \n        rows_layout = QHBoxLayout()\n        rows_layout.addWidget(QLabel('عدد الصفوف:'))\n        rows_input = QSpinBox()\n        rows_input.setMinimum(1)\n        rows_input.setMaximum(50)\n        rows_input.setValue(3)\n        rows_layout.addWidget(rows_input)\n        layout.addLayout(rows_layout)\n        \n        cols_layout = QHBoxLayout()\n        cols_layout.addWidget(QLabel('عدد الأعمدة:'))\n        cols_input = QSpinBox()\n        cols_input.setMinimum(1)\n        cols_input.setMaximum(20)\n        cols_input.setValue(3)\n        cols_layout.addWidget(cols_input)\n        layout.addLayout(cols_layout)\n        \n        buttons = QDialogButtonBox(\n            QDialogButtonBox.StandardButton.Ok | \n            QDialogButtonBox.StandardButton.Cancel\n        )\n        buttons.accepted.connect(dialog.accept)\n        buttons.rejected.connect(dialog.reject)\n        layout.addWidget(buttons)\n        \n        dialog.setLayout(layout)\n        \n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            rows = rows_input.value()\n            cols = cols_input.value()\n            \n            # Insert table using QTextTable\n            cursor = self.text_edit.textCursor()\n            table_format = QTextTableFormat()\n            table_format.setBorderStyle(QTextTableFormat.BorderStyle.BorderStyle_Solid)\n            table_format.setCellPadding(5)\n            table_format.setCellSpacing(0)\n            table = cursor.insertTable(rows, cols, table_format)\n            \n            QMessageBox.information(self, 'نجح', f'تم إدراج جدول {rows}×{cols} بنجاح')\n    \n    def print_document(self):\n        try:\n            printer = QPrinter(QPrinter.PrinterMode.HighResolution)\n            dialog = QPrintDialog(printer, self)\n            \n            if dialog.exec() == QPrintDialog.DialogCode.Accepted:\n                self.text_edit.document().print(printer)\n                QMessageBox.information(self, 'نجح', 'تم الطباعة بنجاح')\n        except Exception as e:\n            QMessageBox.critical(self, 'خطأ', f'حدث خطأ أثناء الطباعة:\\n{str(e)}')\n    \n    def show_context_menu(self, position):\n        cursor = self.text_edit.cursorForPosition(position)\n        table = cursor.currentTable()\n        \n        menu = QMenu(self)\n        \n        if table:\n            add_row_action = QAction('إضافة صف', self)\n            add_row_action.triggered.connect(lambda: self.add_table_row(table, cursor))\n            menu.addAction(add_row_action)\n            \n            remove_row_action = QAction('حذف صف', self)\n            remove_row_action.triggered.connect(lambda: self.remove_table_row(table, cursor))\n            menu.addAction(remove_row_action)\n            \n            menu.addSeparator()\n            \n            add_col_action = QAction('إضافة عمود', self)\n            add_col_action.triggered.connect(lambda: self.add_table_column(table, cursor))\n            menu.addAction(add_col_action)\n            \n            remove_col_action = QAction('حذف عمود', self)\n            remove_col_action.triggered.connect(lambda: self.remove_table_column(table, cursor))\n            menu.addAction(remove_col_action)\n            \n            menu.addSeparator()\n            \n            edit_table_action = QAction('تحرير خصائص الجدول', self)\n            edit_table_action.triggered.connect(lambda: self.edit_table_properties(table))\n            menu.addAction(edit_table_action)\n            \n            menu.addSeparator()\n            \n            merge_cells_action = QAction('دمج الخلايا المحددة', self)\n            merge_cells_action.triggered.connect(lambda: self.merge_selected_cells(table, cursor))\n            menu.addAction(merge_cells_action)\n            \n            split_cell_action = QAction('فك دمج الخلية', self)\n            split_cell_action.triggered.connect(lambda: self.split_current_cell(table, cursor))\n            menu.addAction(split_cell_action)\n        else:\n            default_action = QAction('لا يوجد جدول في موضع المؤشر', self)\n            default_action.setEnabled(False)\n            menu.addAction(default_action)\n        \n        menu.exec(self.text_edit.mapToGlobal(position))\n    \n    def add_table_row(self, table, cursor):\n        cell = table.cellAt(cursor)\n        row = cell.row()\n        table.insertRows(row + 1, 1)\n        QMessageBox.information(self, 'نجح', 'تم إضافة صف جديد')\n    \n    def remove_table_row(self, table, cursor):\n        if table.rows() <= 1:\n            QMessageBox.warning(self, 'تحذير', 'لا يمكن حذف الصف الوحيد في الجدول')\n            return\n        \n        cell = table.cellAt(cursor)\n        row = cell.row()\n        table.removeRows(row, 1)\n        QMessageBox.information(self, 'نجح', 'تم حذف الصف')\n    \n    def add_table_column(self, table, cursor):\n        cell = table.cellAt(cursor)\n        col = cell.column()\n        table.insertColumns(col + 1, 1)\n        QMessageBox.information(self, 'نجح', 'تم إضافة عمود جديد')\n    \n    def remove_table_column(self, table, cursor):\n        if table.columns() <= 1:\n            QMessageBox.warning(self, 'تحذير', 'لا يمكن حذف العمود الوحيد في الجدول')\n            return\n        \n        cell = table.cellAt(cursor)\n        col = cell.column()\n        table.removeColumns(col, 1)\n        QMessageBox.information(self, 'نجح', 'تم حذف العمود')\n    \n    def edit_table_properties(self, table):\n        dialog = QDialog(self)\n        dialog.setWindowTitle('تحرير خصائص الجدول')\n        dialog.setFixedWidth(400)\n        \n        layout = QVBoxLayout()\n        \n        border_layout = QHBoxLayout()\n        border_layout.addWidget(QLabel('نمط الإطار:'))\n        border_style_combo = QComboBox()\n        border_style_combo.addItems(['بدون إطار', 'خط مفرد', 'خط مزدوج', 'خط منقط', 'خط متقطع'])\n        border_layout.addWidget(border_style_combo)\n        layout.addLayout(border_layout)\n        \n        current_format = table.format()\n        current_border = current_format.borderStyle()\n        \n        if current_border == QTextTableFormat.BorderStyle.BorderStyle_None:\n            border_style_combo.setCurrentIndex(0)\n        elif current_border == QTextTableFormat.BorderStyle.BorderStyle_Solid:\n            border_style_combo.setCurrentIndex(1)\n        elif current_border == QTextTableFormat.BorderStyle.BorderStyle_Double:\n            border_style_combo.setCurrentIndex(2)\n        elif current_border == QTextTableFormat.BorderStyle.BorderStyle_Dotted:\n            border_style_combo.setCurrentIndex(3)\n        elif current_border == QTextTableFormat.BorderStyle.BorderStyle_Dashed:\n            border_style_combo.setCurrentIndex(4)\n        \n        width_layout = QHBoxLayout()\n        width_layout.addWidget(QLabel('عرض الإطار:'))\n        border_width_spin = QDoubleSpinBox()\n        border_width_spin.setMinimum(0)\n        border_width_spin.setMaximum(10)\n        border_width_spin.setValue(current_format.border())\n        border_width_spin.setSingleStep(0.5)\n        width_layout.addWidget(border_width_spin)\n        layout.addLayout(width_layout)\n        \n        padding_layout = QHBoxLayout()\n        padding_layout.addWidget(QLabel('المسافة الداخلية للخلايا:'))\n        cell_padding_spin = QDoubleSpinBox()\n        cell_padding_spin.setMinimum(0)\n        cell_padding_spin.setMaximum(20)\n        cell_padding_spin.setValue(current_format.cellPadding())\n        cell_padding_spin.setSingleStep(1)\n        padding_layout.addWidget(cell_padding_spin)\n        layout.addLayout(padding_layout)\n        \n        spacing_layout = QHBoxLayout()\n        spacing_layout.addWidget(QLabel('المسافة بين الخلايا:'))\n        cell_spacing_spin = QDoubleSpinBox()\n        cell_spacing_spin.setMinimum(0)\n        cell_spacing_spin.setMaximum(20)\n        cell_spacing_spin.setValue(current_format.cellSpacing())\n        cell_spacing_spin.setSingleStep(1)\n        spacing_layout.addWidget(cell_spacing_spin)\n        layout.addLayout(spacing_layout)\n        \n        buttons = QDialogButtonBox(\n            QDialogButtonBox.StandardButton.Ok | \n            QDialogButtonBox.StandardButton.Cancel\n        )\n        buttons.accepted.connect(dialog.accept)\n        buttons.rejected.connect(dialog.reject)\n        layout.addWidget(buttons)\n        \n        dialog.setLayout(layout)\n        \n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            new_format = QTextTableFormat()\n            \n            border_styles = [\n                QTextTableFormat.BorderStyle.BorderStyle_None,\n                QTextTableFormat.BorderStyle.BorderStyle_Solid,\n                QTextTableFormat.BorderStyle.BorderStyle_Double,\n                QTextTableFormat.BorderStyle.BorderStyle_Dotted,\n                QTextTableFormat.BorderStyle.BorderStyle_Dashed\n            ]\n            new_format.setBorderStyle(border_styles[border_style_combo.currentIndex()])\n            new_format.setBorder(border_width_spin.value())\n            new_format.setCellPadding(cell_padding_spin.value())\n            new_format.setCellSpacing(cell_spacing_spin.value())\n            \n            table.setFormat(new_format)\n            QMessageBox.information(self, 'نجح', 'تم تحديث خصائص الجدول بنجاح')\n    \n    def edit_current_table(self):\n        cursor = self.text_edit.textCursor()\n        table = cursor.currentTable()\n        \n        if table:\n            self.edit_table_properties(table)\n        else:\n            QMessageBox.warning(self, 'تحذير', 'الرجاء وضع المؤشر داخل الجدول المراد تحريره')\n    \n    def merge_selected_cells(self, table, cursor):\n        cell = table.cellAt(cursor)\n        if not cell.isValid():\n            QMessageBox.warning(self, 'خطأ', 'لا يمكن تحديد الخلية')\n            return\n        \n        dialog = QDialog(self)\n        dialog.setWindowTitle('دمج الخلايا')\n        dialog.setFixedWidth(350)\n        \n        layout = QVBoxLayout()\n        \n        info_label = QLabel(f'الخلية الحالية: صف {cell.row() + 1}, عمود {cell.column() + 1}')\n        layout.addWidget(info_label)\n        \n        rows_layout = QHBoxLayout()\n        rows_layout.addWidget(QLabel('عدد الصفوف للدمج:'))\n        rows_spin = QSpinBox()\n        rows_spin.setMinimum(1)\n        rows_spin.setMaximum(table.rows() - cell.row())\n        rows_spin.setValue(1)\n        rows_layout.addWidget(rows_spin)\n        layout.addLayout(rows_layout)\n        \n        cols_layout = QHBoxLayout()\n        cols_layout.addWidget(QLabel('عدد الأعمدة للدمج:'))\n        cols_spin = QSpinBox()\n        cols_spin.setMinimum(1)\n        cols_spin.setMaximum(table.columns() - cell.column())\n        cols_spin.setValue(1)\n        cols_layout.addWidget(cols_spin)\n        layout.addLayout(cols_layout)\n        \n        buttons = QDialogButtonBox(\n            QDialogButtonBox.StandardButton.Ok | \n            QDialogButtonBox.StandardButton.Cancel\n        )\n        buttons.accepted.connect(dialog.accept)\n        buttons.rejected.connect(dialog.reject)\n        layout.addWidget(buttons)\n        \n        dialog.setLayout(layout)\n        \n        if dialog.exec() == QDialog.DialogCode.Accepted:\n            num_rows = rows_spin.value()\n            num_cols = cols_spin.value()\n            \n            if num_rows > 1 or num_cols > 1:\n                table.mergeCells(cell.row(), cell.column(), num_rows, num_cols)\n                QMessageBox.information(self, 'نجح', f'تم دمج {num_rows}×{num_cols} خلايا بنجاح')\n            else:\n                QMessageBox.information(self, 'تنبيه', 'لم يتم تحديد خلايا للدمج')\n    \n    def split_current_cell(self, table, cursor):\n        cell = table.cellAt(cursor)\n        if not cell.isValid():\n            QMessageBox.warning(self, 'خطأ', 'لا يمكن تحديد الخلية')\n            return\n        \n        row_span = cell.rowSpan()\n        col_span = cell.columnSpan()\n        \n        if row_span > 1 or col_span > 1:\n            dialog = QDialog(self)\n            dialog.setWindowTitle('فك دمج الخلية')\n            dialog.setFixedWidth(350)\n            \n            layout = QVBoxLayout()\n            \n            info_label = QLabel(f'''\n            <div style=\"text-align: right; direction: rtl;\">\n            <p>الخلية الحالية مدمجة:</p>\n            <p><b>عدد الصفوف:</b> {row_span}</p>\n            <p><b>عدد الأعمدة:</b> {col_span}</p>\n            <p>سيتم فك دمج هذه الخلية إلى {row_span * col_span} خلية منفصلة</p>\n            </div>\n            ''')\n            info_label.setTextFormat(Qt.TextFormat.RichText)\n            layout.addWidget(info_label)\n            \n            buttons = QDialogButtonBox(\n                QDialogButtonBox.StandardButton.Ok | \n                QDialogButtonBox.StandardButton.Cancel\n            )\n            buttons.accepted.connect(dialog.accept)\n            buttons.rejected.connect(dialog.reject)\n            layout.addWidget(buttons)\n            \n            dialog.setLayout(layout)\n            \n            if dialog.exec() == QDialog.DialogCode.Accepted:\n                table.splitCell(cell.row(), cell.column(), 1, 1)\n                QMessageBox.information(self, 'نجح', 'تم فك دمج الخلية بنجاح')\n        else:\n            QMessageBox.information(self, 'تنبيه', 'هذه الخلية غير مدمجة')\n","size_bytes":28040},"ui/import_patients_widget.py":{"content":"# --- NEW FEATURE: Import Patients from Excel ---\nfrom PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, \n                             QLabel, QTableWidget, QTableWidgetItem, QHeaderView,\n                             QMessageBox, QFileDialog, QTextEdit, QGroupBox)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\nimport openpyxl\nimport pandas as pd\nfrom datetime import datetime\nimport os\n\nclass ImportPatientsWidget(QWidget):\n    def __init__(self, db, patient_mgr):\n        super().__init__()\n        self.db = db\n        self.patient_mgr = patient_mgr\n        self.valid_records = []\n        self.invalid_records = []\n        self.setup_ui()\n    \n    def setup_ui(self):\n        layout = QVBoxLayout()\n        \n        header = QLabel('📥 استيراد المرضى من Excel')\n        header.setFont(QFont('Arial', 24, QFont.Weight.Bold))\n        header.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        layout.addWidget(header)\n        \n        instructions = QLabel('''\n        <div style=\"text-align: right; direction: rtl; padding: 10px;\">\n        <h3>تعليمات الاستيراد:</h3>\n        <p>• يجب أن يحتوي ملف Excel على الأعمدة التالية:</p>\n        <p style=\"margin-right: 20px;\">الاسم | هاتف الأهل | تاريخ الدخول | القسم | التكلفة اليومية | يستلم سجائر | عدد السجائر</p>\n        <p>• تنسيق التاريخ: YYYY-MM-DD (مثال: 2024-01-15)</p>\n        <p>• القسم: ديتوكس أو ريكفري</p>\n        <p>• يستلم سجائر: 1 (نعم) أو 0 (لا)</p>\n        </div>\n        ''')\n        instructions.setTextFormat(Qt.TextFormat.RichText)\n        layout.addWidget(instructions)\n        \n        buttons_layout = QHBoxLayout()\n        \n        select_file_btn = QPushButton('📂 اختيار ملف Excel')\n        select_file_btn.clicked.connect(self.select_file)\n        select_file_btn.setFont(QFont('Arial', 12, QFont.Weight.Bold))\n        buttons_layout.addWidget(select_file_btn)\n        \n        buttons_layout.addStretch()\n        layout.addLayout(buttons_layout)\n        \n        # Preview group\n        preview_group = QGroupBox('معاينة البيانات')\n        preview_layout = QVBoxLayout()\n        \n        self.stats_label = QLabel('لم يتم تحميل أي ملف بعد')\n        self.stats_label.setFont(QFont('Arial', 12, QFont.Weight.Bold))\n        preview_layout.addWidget(self.stats_label)\n        \n        self.preview_table = QTableWidget()\n        self.preview_table.setColumnCount(8)\n        self.preview_table.setHorizontalHeaderLabels([\n            'الحالة', 'الاسم', 'هاتف الأهل', 'تاريخ الدخول', \n            'القسم', 'التكلفة اليومية', 'يستلم سجائر', 'عدد السجائر'\n        ])\n        self.preview_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.preview_table.setLayoutDirection(Qt.LayoutDirection.RightToLeft)\n        preview_layout.addWidget(self.preview_table)\n        \n        preview_group.setLayout(preview_layout)\n        layout.addWidget(preview_group)\n        \n        # Error log group\n        error_group = QGroupBox('سجل الأخطاء')\n        error_layout = QVBoxLayout()\n        \n        self.error_log = QTextEdit()\n        self.error_log.setReadOnly(True)\n        self.error_log.setMaximumHeight(150)\n        error_layout.addWidget(self.error_log)\n        \n        error_group.setLayout(error_layout)\n        layout.addWidget(error_group)\n        \n        # Import button\n        import_layout = QHBoxLayout()\n        \n        self.import_btn = QPushButton('✅ حفظ السجلات الصحيحة في قاعدة البيانات')\n        self.import_btn.clicked.connect(self.import_records)\n        self.import_btn.setEnabled(False)\n        self.import_btn.setFont(QFont('Arial', 14, QFont.Weight.Bold))\n        self.import_btn.setStyleSheet('''\n            QPushButton {\n                background-color: #27ae60;\n                color: white;\n                padding: 15px;\n                border-radius: 8px;\n            }\n            QPushButton:hover {\n                background-color: #229954;\n            }\n            QPushButton:disabled {\n                background-color: #95a5a6;\n            }\n        ''')\n        import_layout.addWidget(self.import_btn)\n        \n        layout.addLayout(import_layout)\n        self.setLayout(layout)\n    \n    def select_file(self):\n        file_path, _ = QFileDialog.getOpenFileName(\n            self,\n            'اختيار ملف Excel',\n            '',\n            'Excel Files (*.xlsx *.xls)'\n        )\n        \n        if file_path:\n            self.load_excel_file(file_path)\n    \n    def load_excel_file(self, file_path):\n        try:\n            self.valid_records = []\n            self.invalid_records = []\n            self.error_log.clear()\n            \n            # Read Excel file using pandas\n            df = pd.read_excel(file_path)\n            \n            # Expected columns\n            expected_columns = ['الاسم', 'هاتف الأهل', 'تاريخ الدخول', 'القسم', \n                              'التكلفة اليومية', 'يستلم سجائر', 'عدد السجائر']\n            \n            # Check if all columns exist\n            missing_columns = [col for col in expected_columns if col not in df.columns]\n            if missing_columns:\n                QMessageBox.warning(\n                    self, \n                    'خطأ', \n                    f'الأعمدة التالية مفقودة في الملف:\\n{\", \".join(missing_columns)}'\n                )\n                return\n            \n            # Validate and categorize records\n            for index, row in df.iterrows():\n                try:\n                    # Validate name\n                    name = str(row['الاسم']).strip()\n                    if not name or name == 'nan':\n                        raise ValueError('الاسم مطلوب')\n                    \n                    # Validate phone (optional)\n                    phone = str(row['هاتف الأهل']).strip() if pd.notna(row['هاتف الأهل']) else ''\n                    \n                    # Validate admission date\n                    admission_date = pd.to_datetime(row['تاريخ الدخول'])\n                    admission_date_str = admission_date.strftime('%Y-%m-%d')\n                    \n                    # Validate department\n                    department = str(row['القسم']).strip()\n                    if department not in ['ديتوكس', 'ريكفري']:\n                        raise ValueError('القسم يجب أن يكون ديتوكس أو ريكفري')\n                    \n                    # Validate daily cost\n                    daily_cost = float(row['التكلفة اليومية'])\n                    if daily_cost <= 0:\n                        raise ValueError('التكلفة اليومية يجب أن تكون أكبر من صفر')\n                    \n                    # Validate cigarettes\n                    receives_cigarettes = int(row['يستلم سجائر'])\n                    if receives_cigarettes not in [0, 1]:\n                        raise ValueError('يستلم سجائر يجب أن يكون 0 أو 1')\n                    \n                    cigarettes_count = int(row['عدد السجائر']) if receives_cigarettes == 1 else 0\n                    if receives_cigarettes == 1 and cigarettes_count <= 0:\n                        raise ValueError('عدد السجائر يجب أن يكون أكبر من صفر')\n                    \n                    # Valid record\n                    self.valid_records.append({\n                        'name': name,\n                        'family_phone': phone,\n                        'admission_date': admission_date_str,\n                        'department': department,\n                        'daily_cost': daily_cost,\n                        'receives_cigarettes': receives_cigarettes,\n                        'cigarettes_count': cigarettes_count,\n                        'status': '✅ صحيح'\n                    })\n                    \n                except Exception as e:\n                    # Invalid record\n                    self.invalid_records.append({\n                        'name': str(row['الاسم']) if pd.notna(row['الاسم']) else 'غير محدد',\n                        'family_phone': str(row['هاتف الأهل']) if pd.notna(row['هاتف الأهل']) else '',\n                        'admission_date': str(row['تاريخ الدخول']) if pd.notna(row['تاريخ الدخول']) else '',\n                        'department': str(row['القسم']) if pd.notna(row['القسم']) else '',\n                        'daily_cost': str(row['التكلفة اليومية']) if pd.notna(row['التكلفة اليومية']) else '',\n                        'receives_cigarettes': str(row['يستلم سجائر']) if pd.notna(row['يستلم سجائر']) else '',\n                        'cigarettes_count': str(row['عدد السجائر']) if pd.notna(row['عدد السجائر']) else '',\n                        'status': f'❌ خطأ: {str(e)}',\n                        'error': str(e)\n                    })\n                    self.error_log.append(f'السطر {index + 2}: {str(row[\"الاسم\"])} - {str(e)}')\n            \n            # Update UI\n            self.update_preview()\n            \n        except Exception as e:\n            QMessageBox.critical(\n                self,\n                'خطأ',\n                f'حدث خطأ أثناء قراءة الملف:\\n{str(e)}'\n            )\n    \n    def update_preview(self):\n        total_records = len(self.valid_records) + len(self.invalid_records)\n        valid_count = len(self.valid_records)\n        invalid_count = len(self.invalid_records)\n        \n        self.stats_label.setText(\n            f'إجمالي السجلات: {total_records} | '\n            f'السجلات الصحيحة: ✅ {valid_count} | '\n            f'السجلات الخاطئة: ❌ {invalid_count}'\n        )\n        \n        # Display all records in table\n        all_records = self.valid_records + self.invalid_records\n        self.preview_table.setRowCount(len(all_records))\n        \n        for row, record in enumerate(all_records):\n            status_item = QTableWidgetItem(record['status'])\n            if '✅' in record['status']:\n                status_item.setBackground(Qt.GlobalColor.green)\n            else:\n                status_item.setBackground(Qt.GlobalColor.red)\n            \n            self.preview_table.setItem(row, 0, status_item)\n            self.preview_table.setItem(row, 1, QTableWidgetItem(record['name']))\n            self.preview_table.setItem(row, 2, QTableWidgetItem(record['family_phone']))\n            self.preview_table.setItem(row, 3, QTableWidgetItem(str(record['admission_date'])))\n            self.preview_table.setItem(row, 4, QTableWidgetItem(str(record['department'])))\n            self.preview_table.setItem(row, 5, QTableWidgetItem(str(record['daily_cost'])))\n            self.preview_table.setItem(row, 6, QTableWidgetItem(str(record['receives_cigarettes'])))\n            self.preview_table.setItem(row, 7, QTableWidgetItem(str(record['cigarettes_count'])))\n        \n        # Enable import button if there are valid records\n        self.import_btn.setEnabled(len(self.valid_records) > 0)\n    \n    def import_records(self):\n        if len(self.valid_records) == 0:\n            QMessageBox.warning(self, 'تحذير', 'لا توجد سجلات صحيحة للاستيراد')\n            return\n        \n        reply = QMessageBox.question(\n            self,\n            'تأكيد الاستيراد',\n            f'هل أنت متأكد من استيراد {len(self.valid_records)} سجل إلى قاعدة البيانات؟',\n            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No\n        )\n        \n        if reply == QMessageBox.StandardButton.Yes:\n            try:\n                # Import in batches\n                batch_size = 50\n                imported_count = 0\n                failed_count = 0\n                \n                for i in range(0, len(self.valid_records), batch_size):\n                    batch = self.valid_records[i:i + batch_size]\n                    \n                    for record in batch:\n                        try:\n                            self.patient_mgr.add_patient(\n                                record['name'],\n                                record['family_phone'],\n                                record['admission_date'],\n                                record['department'],\n                                record['daily_cost'],\n                                record['receives_cigarettes'],\n                                record['cigarettes_count']\n                            )\n                            imported_count += 1\n                        except Exception as e:\n                            failed_count += 1\n                            self.error_log.append(f'فشل حفظ: {record[\"name\"]} - {str(e)}')\n                \n                # Log the import operation\n                self.log_import_operation(imported_count, failed_count)\n                \n                QMessageBox.information(\n                    self,\n                    'نجح',\n                    f'تم استيراد {imported_count} سجل بنجاح\\n'\n                    f'فشل استيراد {failed_count} سجل'\n                )\n                \n                # Reset\n                self.valid_records = []\n                self.invalid_records = []\n                self.preview_table.setRowCount(0)\n                self.stats_label.setText('تم الاستيراد بنجاح')\n                self.import_btn.setEnabled(False)\n                \n            except Exception as e:\n                QMessageBox.critical(\n                    self,\n                    'خطأ',\n                    f'حدث خطأ أثناء الاستيراد:\\n{str(e)}'\n                )\n    \n    def log_import_operation(self, imported_count, failed_count):\n        try:\n            log_file = 'import_log.txt'\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            \n            with open(log_file, 'a', encoding='utf-8') as f:\n                f.write(f'\\n=== استيراد المرضى - {timestamp} ===\\n')\n                f.write(f'عدد السجلات المستوردة: {imported_count}\\n')\n                f.write(f'عدد السجلات الفاشلة: {failed_count}\\n')\n                f.write('=' * 50 + '\\n')\n        except Exception as e:\n            print(f'فشل تسجيل العملية: {str(e)}')\n","size_bytes":14894}},"version":2}